<?xml version="1.0"?>
<doc>
  <assembly>
    <name>ObservatoryLib</name>
  </assembly>
  <members>
    <member name="M:ObservatoryLib.Axis2DAccessor`2.SetAxisSizeFactor(System.Double)">
      <summary>
            Makes the axes take up a larger or smaller portion of the allotted space.
            The default value is 1. Larger numbers result in axes encompassing a larger
            region of the screen.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:ObservatoryLib.Axis2DAccessor`2.SetAxisSizeFactor(System.Double,System.Double)">
      <summary>
            Makes the axes take up a larger or smaller portion of the allowed space.
            The default value is (1,1), and this allows you to specify X and Y scales
            separately.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Axis3DAccessor`3.SetAxisSizeFactor(System.Double)">
      <summary>
            Makes the axes take up a larger or smaller portion of the allotted space.
            The default value is 1. Larger numbers result in axes encompassing a larger
            region of the screen.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.VisibleCenter">
      <summary>
            The point in space that is directly in the center of the pixel area
            spanned by the axes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.VisibleArea">
      <summary>
            The rectangular area in data coordinates that is visible within the 
            pixel area spanned by the axes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.GetPixel(ObservatoryLib.Vector2d)">
      <summary>
            The pixel coordinates (possibly off-screen) where a point at the specified
            location (in data coordinates) will appear. 
            Pixels are (0,0) in the upper-left of the visualization.
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.PixelToDataCoords(ObservatoryLib.Vector2d)">
      <summary>
            The data coordinates that are mapped to the specified pixel location. 
            Pixels are (0,0) in the upper-left of the visualization.
            </summary>
      <param name="pixel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.PixelArea">
      <summary>
            The rectangular area, in pixels, that is spanned by the axes of this 
            visualization, and which serves as a basis for many intreractions.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.LookAt(ObservatoryLib.Vector2d,System.Boolean)">
      <summary>
            Translates the camera so that the specified point in data coordinates is
            in the center of the pixel area spanned by the axes.
            </summary>
      <param name="position">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.Zoom(System.Double,System.Boolean)">
      <summary>
            Zooms the camera so that linear dimensions are stretched
            by the specified factor.
            </summary>
      <param name="factor">Inward &lt; 1; Outward &gt; &gt; 1</param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.SetMinMax(ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,System.Boolean)">
      <summary>
            Updates the zoom and translation so that the specified min/max values 
            exactly span the pixel area within the axes.
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.SetVisibleArea(ObservatoryLib.RectangularArea,System.Boolean)">
      <summary>
            Updates the zoom and translation so that the specified area
            exactly span the pixel area within the axes.
            </summary>
      <param name="area">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.SetMinMax(ObservatoryLib.D2,System.Double,System.Double,System.Boolean)">
      <summary>
            Updates the zoom and translation along only the specified axis so that 
            the specified values map to the edges of the pixel area within the axes.
            </summary>
      <param name="axis">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.ResetMinMax(ObservatoryLib.RectangularArea)">
      <summary>
            Zooms and translates to show the specified area in the pixel area within
            the axes. Further, updates the "reset" area.
            </summary>
      <param name="area">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.ResetMinMax(System.Nullable{`0},System.Nullable{`0},System.Nullable{`1},System.Nullable{`1})">
      <summary>
            Zooms and translates to map the specified min/max values to the screen
            area within the axes. Further, updates the "reset" area. If null is 
            supplied, or if this method is never called, the reset area is determined
            automatically from the content being visualized.
            </summary>
      <param name="minX">
      </param>
      <param name="maxX">
      </param>
      <param name="minY">
      </param>
      <param name="maxY">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.ResetMinMaxX(System.Nullable{`0},System.Nullable{`0})">
      <summary>
            Zooms and translates to map the specified min value to the lower end of 
            the pixel area within the axes, only in the X axis. 
            Further, updates the "reset" area. Zooms and translates 
            the Y axis to map the reset area to the pixel area within that axis.
            If null is supplied, or if this method is never called, the reset area is 
            determined automatically from the content being visualized.
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.ResetMinMaxY(System.Nullable{`1},System.Nullable{`1})">
      <summary>
            Zooms and translates to map the specified min value to the lower end of 
            the pixel area within the axes, only in the Y axis. 
            Further, updates the "reset" area. Zooms and translates 
            the X axis to map the reset area to the pixel area within that axis.
            If null is supplied, or if this method is never called, the reset area is 
            determined automatically from the content being visualized.
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.ResetMinX(System.Nullable{`0})">
      <summary>
            Zooms and translates to map the specified min value to the lower end of 
            the pixel area within the axes, only for the X axis. 
            Further, updates the "reset" area. Additionally, zooms and translates 
            the other bounds to map the reset area to the pixel area within the axes.
            If null is supplied, or if this method is never called, the reset area is 
            determined automatically from the content being visualized.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.ResetMaxX(System.Nullable{`0})">
      <summary>
            Zooms and translates to map the specified max value to the upper end of 
            the pixel area within the axes, only for the X axis. 
            Further, updates the "reset" area. Additionally, zooms and translates 
            the other bounds to map the reset area to the pixel area within the axes.
            If null is supplied, or if this method is never called, the reset area is 
            determined automatically from the content being visualized.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.ResetMinY(System.Nullable{`1})">
      <summary>
            Zooms and translates to map the specified min value to the lower end of 
            the pixel area within the axes, only for the Y axis. 
            Further, updates the "reset" area. Additionally, zooms and translates 
            the other bounds to map the reset area to the pixel area within the axes.
            If null is supplied, or if this method is never called, the reset area is 
            determined automatically from the content being visualized.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.ResetMaxY(System.Nullable{`1})">
      <summary>
            Zooms and translates to map the specified max value to the upper end of 
            the pixel area within the axes, only for the Y axis. 
            Further, updates the "reset" area. Additionally, zooms and translates 
            the other bounds to map the reset area to the pixel area within the axes.
            If null is supplied, or if this method is never called, the reset area is 
            determined automatically from the content being visualized.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.Reset(System.Boolean)">
      <summary>
            Zooms and translates to map the reset area to the pixel area within the 
            axes. If any of the bounds of the reset area were determined automatically,
            those bounds will be recalculated, and potentially updated if the content 
            being visualized has changed.
            </summary>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.ResetForItem(ObservatoryLib.IPhysicalSyncable{ObservatoryLib.V2{`0,`1}},System.Boolean)">
      <summary> 
            Updates the reset area so that it comfortably spans the area that contains 
            the specified item. Additionally, zooms and translates to map the new reset 
            area to the pixel area within the axes. 
            </summary>
      <param name="item">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.ResetForItems(ObservatoryLib.IPhysicalSyncable{ObservatoryLib.V2{`0,`1}}[],System.Boolean)">
      <summary>
            Updates the reset area so that it comfortably spans the area that contains 
            all the specified items. Additionally, zooms and translates to map the 
            new reset area to the pixel area within the axes. 
            </summary>
      <param name="items">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera2DAccessor`2.FlipUpsideDown">
      <summary>
            Moves the camera so that the current up vector becomes the down vector,
            and vice versa.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.GetOrientation(ObservatoryLib.Vector3d@,ObservatoryLib.Vector3d@,ObservatoryLib.Vector3d@)">
      <summary>
            Obtains the current rotation of the camera.
            </summary>
      <param name="facing">The direction the camera is facing.</param>
      <param name="right">The apparent direction of "right" in the camera's image.</param>
      <param name="up">The apparent directino of "up" in the camera's image.</param>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.SetOrientation(ObservatoryLib.Vector3d,System.Boolean)">
      <summary>
            Rotate the camera so that it faces the specified direction. The
            roll of the camera will remain unchanged.
            </summary>
      <param name="facing">
      </param>
      <param name="goImmediately">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.SetOrientation(ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,System.Boolean)">
      <summary>
            Rotate the camera so that it faces in the specified direction and is rolled
            such that "up" in the image is also in the specified direction.
            </summary>
      <param name="facing">
      </param>
      <param name="up">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.GetSubject">
      <summary>
            Gets the location of the "subject" which the camera is looking at. Rotations
            are rotations about this point.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.SetSubject(ObservatoryLib.Vector3d,System.Boolean)">
      <summary>
            Translates the camera so that the subject is the specified value.
            </summary>
      <param name="position">
      </param>
      <param name="goImmediately">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.GetPosition">
      <summary>
            Gets the current position of the camera.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.SetPosition(ObservatoryLib.Vector3d,System.Boolean)">
      <summary>
            Sets the position of the camera in space. Translates the subject of the 
            camera so that its position with respect to the camera is unchanged.
            </summary>
      <param name="position">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.RotateRelative(System.Double,System.Double,System.Boolean)">
      <summary>
            Rotates the camera by the specified angles relative to its 
            current orientation. 
            </summary>
      <param name="horizontal">Angle to rotate about the "Up" axis, radians</param>
      <param name="vertical">Angle to rotate about the "Right" axis, radians</param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.PanRelativePixels(System.Double,System.Double)">
      <summary>
            Pans the camera left/right and/or up/down by the specified
            amount in pixels. Positive horizontal means data appears to 
            shift left; Positive vertical means data appears to move down.
            </summary>
      <param name="horizontal">The amount to translate to the right, in pixels.</param>
      <param name="vertical">The amount to translate up, in pixels.</param>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.Zoom(System.Double,System.Boolean)">
      <summary>
            Causes the camera to zoom inward (if the value is less than 1) or
            outward (if the value is greater than 1) by the specified scaling
            factor.
            </summary>
      <param name="factor">A factor to zoom in or out. Unity 
            causes to apparent motion either in or out.</param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.SetProjectionType(System.Boolean,System.Boolean)">
      <summary>
            Sets the projection type of the camera to either orthographic or perspective.
            Does not change the subject or effective field of view.
            </summary>
      <param name="ortho">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.GetThetaPhi">
      <summary>
            Gets the current angles that describe which way the camera is facing. 
            Phi ranges from 0 at the +Z axis to pi at the -Z axis.
            Theta ranges from 0 to 2*pi, starting at the +X axis, and going towards the +Y axis.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.GetIsPerspective">
      <summary>
            Returns true if the camera's current projection mode is perspective; false
            if it is orthographic.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.SetFieldOfView(System.Double)">
      <summary>
            Sets the angular vertical field of view of the camera, in radians. 
            The default is pi/4. If the camera projection mode is orthographic, 
            this method has no effect.
            </summary>
      <param name="fov">
      </param>
    </member>
    <member name="M:ObservatoryLib.Camera3DAccessor`3.SetSpatialFieldOfView(System.Double,System.Double)">
      <summary>
            Sets the spatial field of view of the camera. If the projection mode of the
            camera is perspective, this method has no effect.
            </summary>
      <param name="horiz">
      </param>
      <param name="vert">
      </param>
    </member>
    <member name="M:ObservatoryLib.CameraHelpers.SetOrientation``3(ObservatoryLib.Camera3DAccessor{``0,``1,``2},ObservatoryLib.SignedAxis,ObservatoryLib.SignedAxis,System.Boolean)">
      <summary>
            Rotates the camera so that the direction of right and up in its view of the
            scene are aligned with the specified axes.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="camera">
      </param>
      <param name="right">
      </param>
      <param name="up">
      </param>
      <param name="goImmediately">
      </param>
    </member>
    <member name="M:ObservatoryLib.CameraHelpers.SetOrientation``3(ObservatoryLib.Camera3DAccessor{``0,``1,``2},System.Double,System.Double,System.Boolean)">
      <summary>
            Rotates the camera so that it faces a direction specified by the 
            specified spherical coordinates. The "roll" of the camera will be unchanged.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="camera">
      </param>
      <param name="theta">The rotation about the Z-axis by, in radians, towards 
            the +Y axis, from the +X axis (counter-clockwise as viewed from +Z)</param>
      <param name="phi">The angle, in radians, away from the +Z axis</param>
      <param name="goImmediately">
      </param>
    </member>
    <member name="M:ObservatoryLib.CameraHelpers.LookAt``3(ObservatoryLib.Camera3DAccessor{``0,``1,``2},ObservatoryLib.Vector3d,System.Boolean)">
      <summary>
            Translates the camera so that the subject is the specified value. (Same as
            SetSubject).
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="camera">
      </param>
      <param name="subject">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.CameraHelpers.ViewXY``3(ObservatoryLib.Camera3DAccessor{``0,``1,``2},System.Boolean)">
      <summary>
            Rotate the camera to view the scene with the 
            +X axis pointing to the right, and the +Y axis pointing up.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="camera">
      </param>
      <param name="goImmediately">
      </param>
    </member>
    <member name="M:ObservatoryLib.CameraHelpers.ViewYZ``3(ObservatoryLib.Camera3DAccessor{``0,``1,``2},System.Boolean)">
      <summary>
            Rotate the camera to view the scene with the
            +Y axis pointing to the right, and the +Z axis pointing up.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="camera">
      </param>
      <param name="goImmediately">
      </param>
    </member>
    <member name="M:ObservatoryLib.CameraHelpers.ViewXZ``3(ObservatoryLib.Camera3DAccessor{``0,``1,``2},System.Boolean)">
      <summary>
            Rotate the camera to view the scene with the +X axis pointing to the right, 
            and the +Z axis pointing up.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="camera">
      </param>
      <param name="goImmediately">
      </param>
    </member>
    <member name="M:ObservatoryLib.CameraHelpers.FlipUpDown``3(ObservatoryLib.Camera3DAccessor{``0,``1,``2},System.Boolean)">
      <summary>
            Rotate the camera such that it faces the opposite direction 
            and up in the image is also opposite. 
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="camera">
      </param>
      <param name="goImmediately">
      </param>
    </member>
    <member name="M:ObservatoryLib.CameraHelpers.FlipLeftRight``3(ObservatoryLib.Camera3DAccessor{``0,``1,``2},System.Boolean)">
      <summary>
            Rotate the camera such that it faces the opposite direction
            and up in the image is the same direction as previously.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="camera">
      </param>
      <param name="goImmediately">
      </param>
    </member>
    <member name="M:ObservatoryLib.CameraHelpers.SetProjectionOrthographic``3(ObservatoryLib.Camera3DAccessor{``0,``1,``2},System.Boolean)">
      <summary>
            View the scene with the same translation and effective field of view, but 
            with an orthographic projection (as if the camera is infinitiely far away).
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="camera">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="M:ObservatoryLib.CameraHelpers.SetProjectionPerspective``3(ObservatoryLib.Camera3DAccessor{``0,``1,``2},System.Boolean)">
      <summary>
            View the scene using a perspective projection with the same 
            effective field of view and subject as previously.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="camera">
      </param>
      <param name="goNow">
      </param>
    </member>
    <member name="F:ObservatoryLib.ConversionExtensions.NullColor">
      <summary>
            A static value used in all 'ToObsColor(s)' methods, which is substituted 
            anytime the supplied value is null, and the user has not specified a
            substitute in the method call.
            </summary>
    </member>
    <member name="F:ObservatoryLib.ConversionExtensions.TrueColor">
      <summary>
            A static value used in all 'ToObsColor(s)' methods, which is substituted
            anytime the supplied Boolean value is true, and the user has not specified a
            substitute in the method call.
            </summary>
    </member>
    <member name="F:ObservatoryLib.ConversionExtensions.FalseColor">
      <summary>
            A static value used in all 'ToObsColor(s)' methods, which is substituted
            anytime the supplied Boolean value is false, and the user has not specified a
            substitute in the method call.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Double)">
      <summary>
            A convenience method to convert to an object whose type is recognized 
            by Observatory, and whose value is equivalent to that of the input.
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Int32)">
      <summary>
            A convenience method to convert to an object whose type is recognized 
            by Observatory, and whose value is equivalent to that of the input.
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.DateTime)">
      <summary>
            A convenience method to convert to an object whose type is recognized 
            by Observatory, and whose value is equivalent to that of the input.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory, and whose value is 
            equivalent to that of the input element.
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory, and whose value is 
            equivalent to that of the input element.
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Collections.Generic.IEnumerable{System.DateTime})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory, and whose value is 
            equivalent to that of the input element.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.Double}})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory, and whose value is 
            equivalent to that of the input element.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.Int32}})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory, and whose value is 
            equivalent to that of the input element.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.DateTime}})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory, and whose value is 
            equivalent to that of the input element.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Collections.Generic.IEnumerable{ObservatoryLib.Vector2d})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory, and whose value is 
            equivalent to that of the input element.
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Collections.Generic.IEnumerable{ObservatoryLib.Vector3d})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory, and whose value is 
            equivalent to that of the input element.
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Collections.Generic.IEnumerable{ObservatoryLib.Vector2d},ObservatoryLib.Drawing.Color)">
      <summary>
            A convenience method to create a new point for each element in the 
            enumeration, each having the specified color.
            </summary>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Collections.Generic.IEnumerable{ObservatoryLib.Vector2d},ObservatoryLib.IColor)">
      <summary>
            A convenience method to create a new point for each element in the 
            enumeration, each having the specified color.
            </summary>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(ObservatoryLib.Vector2d[],ObservatoryLib.IColor[],System.Int32)">
      <summary>
            A convenience method to create a new point for each element in the 
            enumeration, using the color at the corresponding index of the supplied 
            color array.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Collections.Generic.IEnumerable{ObservatoryLib.Vector3d},ObservatoryLib.Drawing.Color)">
      <summary>
            A convenience method to create a new point for each element in the 
            enumeration, each having the specified color.
            </summary>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(System.Collections.Generic.IEnumerable{ObservatoryLib.Vector3d},ObservatoryLib.IColor)">
      <summary>
            A convenience method to create a new point for each element in the 
            enumeration, each having the specified color.
            </summary>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ForObs(ObservatoryLib.Vector3d[],ObservatoryLib.IColor[],System.Int32)">
      <summary>
            A convenience method to create a new point for each element in the 
            enumeration, using the color at the corresponding index of the supplied 
            color array.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColor(System.Double)">
      <summary>
            A convenience method to convert to an object that is recognized 
            by Observatory as a color, and which has the equivalent value of the input.
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColor(System.Int32)">
      <summary>
            A convenience method to convert to an object that is recognized 
            by Observatory as a color, and which has the equivalent value of the input.
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColor(System.Boolean,System.Nullable{ObservatoryLib.Drawing.Color},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert to an object that is recognized 
            by Observatory as a color, and which has the equivalent value of the input.
            </summary>
      <param name="color">
      </param>
      <param name="trueColor">An optionally-specified color to use is the value is true. If no color is specified, a default value is supplied.</param>
      <param name="falseColor">An optionally-specified color to use is the value is false. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColor(ObservatoryLib.Drawing.Color)">
      <summary>
            A convenience method to convert to an object that is recognized 
            by Observatory as a color, and which has the equivalent value of the input.
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColor(System.Nullable{System.Double},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert to an object that is recognized 
            by Observatory as a color, and which has the equivalent value of the input.
            </summary>
      <param name="color">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColor(System.Nullable{System.Int32},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert to an object that is recognized 
            by Observatory as a color, and which has the equivalent value of the input.
            </summary>
      <param name="color">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColor(System.Nullable{System.Boolean},System.Nullable{ObservatoryLib.Drawing.Color},System.Nullable{ObservatoryLib.Drawing.Color},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert to an object that is recognized 
            by Observatory as a color, and which has the equivalent value of the input.
            </summary>
      <param name="color">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <param name="trueColor">An optionally-specified color to use is the value is true. If no color is specified, a default value is supplied.</param>
      <param name="falseColor">An optionally-specified color to use is the value is false. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColor(System.Nullable{ObservatoryLib.Drawing.Color},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert to an object that is recognized 
            by Observatory as a color, and which has the equivalent value of the input.
            </summary>
      <param name="color">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <param name="colors">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <param name="colors">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors(System.Collections.Generic.IEnumerable{System.Boolean},System.Nullable{ObservatoryLib.Drawing.Color},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <param name="colors">
      </param>
      <param name="trueColor">An optionally-specified color to use is the value is true. If no color is specified, a default value is supplied.</param>
      <param name="falseColor">An optionally-specified color to use is the value is false. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors(System.Collections.Generic.IEnumerable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <param name="colors">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <param name="colors">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <param name="colors">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors(System.Collections.Generic.IEnumerable{System.Nullable{System.Boolean}},System.Nullable{ObservatoryLib.Drawing.Color},System.Nullable{ObservatoryLib.Drawing.Color},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <param name="colors">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <param name="trueColor">An optionally-specified color to use is the value is true. If no color is specified, a default value is supplied.</param>
      <param name="falseColor">An optionally-specified color to use is the value is false. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors(System.Collections.Generic.IEnumerable{System.Nullable{ObservatoryLib.Drawing.Color}},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <param name="colors">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.Double}})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="colors">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.Int32}})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="colors">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.Boolean}},System.Nullable{ObservatoryLib.Drawing.Color},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="colors">
      </param>
      <param name="trueColor">An optionally-specified color to use is the value is true. If no color is specified, a default value is supplied.</param>
      <param name="falseColor">An optionally-specified color to use is the value is false. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,ObservatoryLib.Drawing.Color}})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="colors">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.Nullable{System.Double}}},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="colors">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.Nullable{System.Int32}}},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="colors">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.Nullable{System.Boolean}}},System.Nullable{ObservatoryLib.Drawing.Color},System.Nullable{ObservatoryLib.Drawing.Color},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="colors">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <param name="trueColor">An optionally-specified color to use is the value is true. If no color is specified, a default value is supplied.</param>
      <param name="falseColor">An optionally-specified color to use is the value is false. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionExtensions.ToObsColors``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.Nullable{ObservatoryLib.Drawing.Color}}},System.Nullable{ObservatoryLib.Drawing.Color})">
      <summary>
            A convenience method to convert each element in the enumeration to a 
            new object whose type is recognized by Observatory as a color, and 
            whose value is equivalent to that of the input.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="colors">
      </param>
      <param name="ifNull">An optionally-specified color to use is the value is null. If no color is specified, a default value is supplied.</param>
      <returns>
      </returns>
    </member>
    <member name="F:ObservatoryLib.LineConnectivity.EndPoints">
      <summary>
            Interprets the first 2 vertices as one line segment, the next 2
            vertices as the next line segment and so on.
            </summary>
    </member>
    <member name="F:ObservatoryLib.LineConnectivity.InOrder">
      <summary>
            Connect the first vertex to the second, the second to the third, 
            and so on.
            </summary>
    </member>
    <member name="F:ObservatoryLib.LineConnectivity.Loop">
      <summary>
            Connects the vertices in order and adds a segment from the last
            to the first.
            </summary>
    </member>
    <member name="T:ObservatoryLib.IDrawingBuilder`2">
      <summary>
            Interface for creating "drawings" composed of points, lines, and/or triangles.
            </summary>
      <typeparam name="TP">
      </typeparam>
      <typeparam name="TV">
      </typeparam>
      <remarks>If no name is specified when adding elements, 
            they can not be referenced by name in the future.
            If commit is true, the changes become effective immediately. If commit is false,
            no changes due to this call will take effect until "Commit" is called, 
            even if there are subsequent other calls made with commit=true.
            </remarks>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.AddPoints(`0[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add the array of [points/lines/triangles = elements] to the drawing. 
            Assign them with the specified name. If there are already elements with the 
            specified name, that name now represents the sum of both sets of elements.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.UpdatePointColors(System.Guid,ObservatoryLib.IColor[],System.Boolean)">
      <summary>
            Updates the colors of the points which were previously added with the 
            specified name. NOTE: the number of points having the specified name must
            match the length of the input colors.
            </summary>
      <param name="name">
      </param>
      <param name="c1">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.UpdatePointPositions(System.Guid,`1[],System.Boolean)">
      <summary>
            Updates the positions of the points which were previously added with the 
            specified name. NOTE: the number of points having the specified name must
            match the length of the input positions.
            </summary>
      <param name="name">
      </param>
      <param name="v1">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.NumberOfPointElements(System.Guid)">
      <summary>
            Queries the number of point *elements* having the specified name, or 0 if
            there are none with the specified name.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.AddLines(`0[],`0[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add the array of [points/lines/triangles = elements] to the drawing. 
            Assign them with the specified name. If there are already elements with the 
            specified name, that name now represents the sum of both sets of elements.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.UpdateLineColors(System.Guid,ObservatoryLib.IColor[],ObservatoryLib.IColor[],System.Boolean)">
      <summary>
            Updates the colors of the lines which were previously added with the 
            specified name. NOTE: the number of lines having the specified name must
            match the length of the input colors.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.UpdateLinePositions(System.Guid,`1[],`1[],System.Boolean)">
      <summary>
            Updates the positions of the lines which were previously added with the 
            specified name. NOTE: the number of lines having the specified name must
            match the length of the input positions.
            </summary>
      <param name="name">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.NumberOfLineElements(System.Guid)">
      <summary>
            Queries the number of line *elements* having the specified name, or 0 if
            there are none with the specified name.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.AddTris(`0[],`0[],`0[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add the array of [points/lines/triangles = elements] to the drawing. 
            Assign them with the specified name. If there are already elements with the 
            specified name, that name now represents the sum of both sets of elements.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.UpdateTriColors(System.Guid,ObservatoryLib.IColor[],ObservatoryLib.IColor[],ObservatoryLib.IColor[],System.Boolean)">
      <summary>
            Updates the colors of the triangles which were previously added with the 
            specified name. NOTE: the number of triangles having the specified name must
            match the length of the input colors.
            </summary>
      <param name="name">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.UpdateTriPositions(System.Guid,`1[],`1[],`1[],System.Boolean)">
      <summary>
            Updates the positions of the triangles which were previously added with the 
            specified name. NOTE: the number of triangles having the specified name must
            match the length of the input positions.
            </summary>
      <param name="name">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.NumberOfTriElements(System.Guid)">
      <summary>
            Queries the number of triangle *elements* having the specified name, or 0 if
            there are none with the specified name.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.Clear(System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Call to remove elements from the drawing. If no name is specified, then 
            ALL elements are cleared (not just the un-named ones). 
            </summary>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilder`2.Commit">
      <summary>
            Any interface calls made with commit=false will NOT take effect until
            this method is called. When this method is called, ALL pending uncommitted
            effects take effect immediately.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions.AddPoint``2(ObservatoryLib.IDrawingBuilder{``0,``1},``0,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing builder. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions.AddLine``2(ObservatoryLib.IDrawingBuilder{``0,``1},``0,``0,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TP">
      </typeparam>
      <typeparam name="TV">
      </typeparam>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions.AddLinesConnected``2(ObservatoryLib.IDrawingBuilder{``0,``1},``0[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TP">
      </typeparam>
      <typeparam name="TV">
      </typeparam>
      <param name="b">
      </param>
      <param name="points">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions.AddLineLoop``2(ObservatoryLib.IDrawingBuilder{``0,``1},``0[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TP">
      </typeparam>
      <typeparam name="TV">
      </typeparam>
      <param name="b">
      </param>
      <param name="points">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions.AddLineBox``2(ObservatoryLib.IDrawingBuilder{``0,``1},``0,``0,``0,``0,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <typeparam name="TP">
      </typeparam>
      <typeparam name="TV">
      </typeparam>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions.AddTri``2(ObservatoryLib.IDrawingBuilder{``0,``1},``0,``0,``0,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TP">
      </typeparam>
      <typeparam name="TV">
      </typeparam>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions.AddQuad``2(ObservatoryLib.IDrawingBuilder{``0,``1},``0,``0,``0,``0,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TP">
      </typeparam>
      <typeparam name="TV">
      </typeparam>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions.AddQuads``2(ObservatoryLib.IDrawingBuilder{``0,``1},``0[],``0[],``0[],``0[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing for each quad. The 4 arrays of supplied
            vertices must be the same length. The number of quads formed will be equal to
            the length of each of the arrays of vertices. Each quad is formed from the 
            vertices found at the corresponding index of the supplied vertex arrays. 
            Within each quad, order may be either clockwise or counterclockwise.
            </summary>
      <typeparam name="TP">
      </typeparam>
      <typeparam name="TV">
      </typeparam>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions.AddTris``2(ObservatoryLib.IDrawingBuilder{``0,``1},``0[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles by specifying all vertices in a single array. The 
            array of points is ordered such that the first 3 points are the 3 vertices
            of the first triangles, the next 3 are the 3 vertices of the second triangle,
            and so on.
            </summary>
      <typeparam name="TP">
      </typeparam>
      <typeparam name="TV">
      </typeparam>
      <param name="b">
      </param>
      <param name="p">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions.AddQuads``2(ObservatoryLib.IDrawingBuilder{``0,``1},``0[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of quads by specifying all vertices in a single array. The 
            array of points is ordered such that the first 4 points are the 4 vertices
            of the first quad, the next 4 are the 4 vertices of the second quad,
            and so on. Each set of 4 points can be ordered either 
            clockwise or counterclockwise.
            </summary>
      <typeparam name="TP">
      </typeparam>
      <typeparam name="TV">
      </typeparam>
      <param name="b">
      </param>
      <param name="p">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddPoint``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,ObservatoryLib.IColor,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddPoint``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,System.Double,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddPoint``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,ObservatoryLib.Drawing.Color,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddPoints``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.IColor,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddPoints``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],System.Double,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddPoints``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.Drawing.Color,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddPoints``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.IColor[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddPoints``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddPoints``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},ObservatoryLib.V2{``0,``1}[],ObservatoryLib.IColor,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddPoints``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},ObservatoryLib.V2{``0,``1}[],ObservatoryLib.IColor[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLine``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLine``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLine``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLine``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLine``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLine``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLinesConnected``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLinesConnected``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLinesConnected``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLinesConnected``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLinesConnected``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLinesConnected``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLineLoop``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLineLoop``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLineLoop``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLineLoop``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLineLoop``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddLineLoop``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddTri``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddTri``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddTri``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddTri``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddTri``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddTri``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddTris``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 3 points correspond to the 3 vertices
            of the first triangles, the next 3 are correspond to the 3 vertices 
            of the second triangle, and so on.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddTris``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 3 points correspond to the 3 vertices
            of the first triangles, the next 3 are correspond to the 3 vertices 
            of the second triangle, and so on.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">The colors for the triangles. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/3 the number of vertices (i.e. the number 
            of triangles), each color is assumed to correspond to all 3 vertices of the 
            corresponding triangle.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddQuad``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,``0,``1,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddQuad``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,``0,``1,System.Double,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddQuad``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,``0,``1,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddQuad``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,``0,``1,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddQuad``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,``0,``1,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddQuad``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0,``1,``0,``1,``0,``1,``0,``1,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddQuads``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 4 points correspond to the 4 vertices
            of the first quad, the next 4 correspond to the 4 vertices 
            of the second quad, and so on. The 4 vertices for each quad can be ordered 
            either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions2D.AddQuads``2(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{``0,``1},ObservatoryLib.V2{``0,``1}},``0[],``1[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 4 points correspond to the 4 vertices
            of the first quad, the next 4 correspond to the 4 vertices 
            of the second quad, and so on. The 4 vertices for each quad can be ordered 
            either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">The colors for the quads. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/4 the number of vertices (i.e. the number 
            of quads), each color is assumed to correspond to all 4 vertices of the 
            corresponding quad.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddPoint``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,ObservatoryLib.IColor,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddPoint``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,System.Double,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddPoint``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,ObservatoryLib.Drawing.Color,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddPoints``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddPoints``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],System.Double,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddPoints``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.Drawing.Color,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddPoints``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddPoints``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddPoints``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],System.Double[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLine``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLine``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLine``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLine``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLine``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLine``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLinesConnected``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLinesConnected``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLinesConnected``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLinesConnected``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLinesConnected``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLinesConnected``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLineLoop``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLineLoop``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLineLoop``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLineLoop``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLineLoop``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddLineLoop``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddTri``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddTri``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddTri``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddTri``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddTri``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddTri``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddTris``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles to the drawing. The i-th element of the X, Y, and Z
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 3 points correspond to the 3 vertices
            of the first triangles, the next 3 are correspond to the 3 vertices 
            of the second triangle, and so on.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddTris``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles to the drawing. The i-th element of the X, Y, and Z
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 3 points correspond to the 3 vertices
            of the first triangles, the next 3 are correspond to the 3 vertices 
            of the second triangle, and so on.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">The colors for the triangles. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/3 the number of vertices (i.e. the number 
            of triangles), each color is assumed to correspond to all 3 vertices of the 
            corresponding triangle.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddQuad``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,``0,``1,``2,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="z4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddQuad``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,``0,``1,``2,System.Double,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="z4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddQuad``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,``0,``1,``2,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="z4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddQuad``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,``0,``1,``2,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads. 
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="z4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddQuad``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,``0,``1,``2,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="z4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddQuad``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0,``1,``2,``0,``1,``2,``0,``1,``2,``0,``1,``2,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="x3">
      </param>
      <param name="y3">
      </param>
      <param name="z3">
      </param>
      <param name="x4">
      </param>
      <param name="y4">
      </param>
      <param name="z4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddQuads``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. The i-th element of the X, Y, and Z
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 4 points correspond to the 4 vertices
            of the first quad, the next 4 correspond to the 4 vertices 
            of the second quad, and so on. The 4 vertices for each quad can be ordered 
            either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddQuads``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 4 points correspond to the 4 vertices
            of the first quad, the next 4 correspond to the 4 vertices 
            of the second quad, and so on. The 4 vertices for each quad can be ordered 
            either clockwise or counterclockwise.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">The colors for the quads. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/4 the number of vertices (i.e. the number 
            of quads), each color is assumed to correspond to all 4 vertices of the 
            corresponding quad.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderExtensions3D.AddSurface``3(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{``0,``1,``2},ObservatoryLib.V3{``0,``1,``2}},``0[],``1[],``2[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a continuous surface of triangles over a grid of data in X-Y space.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
      <param name="b">
      </param>
      <param name="xvals">The x-values of the grid, in ascending order. No repeats.</param>
      <param name="yvals">The y-values of the grid, in ascending order. No repeats.</param>
      <param name="zgrid">The z-values at the grid intersection points. Must be (length of x)*(length of y) elements long. Must be in "x-major" order. That is, the first element corresponds to the least (x,y) pair, the second element corresponds to the same y, but the next x, and so on.</param>
      <param name="cGrid">The color grid values that correspond to the z-grid values.</param>
      <param name="commit">
      </param>
      <param name="name">
      </param>
    </member>
    <member name="T:ObservatoryLib.IDrawingBuilderRealExtensions2D">
      <summary>
            These methods are all 1:1 with methods in the generic 2D drawing builder
            extensions. There is no cascading within this class! These methods circumvent 
            the 'shortcoming' in C# wherein I can't implicitly type-convert on an array
            using an implicit cast.
            NOTE: Above statement NOT true. There are a number of places where I am using
            a Vector2d in place of 2 TX or TYs....
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoint(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.IColor,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoint(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,System.Double,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.IColor,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],System.Double,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.IColor[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],System.Double[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double,System.Double,System.Double,System.Double,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double,System.Double,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double,System.Double,System.Double,System.Double,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double,System.Double,System.Double,System.Double,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="p">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="p">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="p">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="p">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,System.Double,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddTris(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles to the drawing. The i-th element of the X and Y
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 3 points correspond to the 3 vertices
            of the first triangles, the next 3 are correspond to the 3 vertices 
            of the second triangle, and so on.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddTris(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles to the drawing. The i-th element of the X and Y
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 3 points correspond to the 3 vertices
            of the first triangles, the next 3 are correspond to the 3 vertices 
            of the second triangle, and so on.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">The colors for the triangles. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/3 the number of vertices (i.e. the number 
            of triangles), each color is assumed to correspond to all 3 vertices of the 
            corresponding triangle.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddTris(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of triangles to the drawing. 
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddTris(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of triangles to the drawing. 
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">The colors for the triangles. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/3 the number of vertices (i.e. the number 
            of triangles), each color is assumed to correspond to all 3 vertices of the 
            corresponding triangle.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,System.Double,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddQuads(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 4 points correspond to the 4 vertices
            of the first quad, the next 4 correspond to the 4 vertices 
            of the second quad, and so on. The 4 vertices for each quad can be ordered 
            either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddQuads(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 4 points correspond to the 4 vertices
            of the first quad, the next 4 correspond to the 4 vertices 
            of the second quad, and so on. The 4 vertices for each quad can be ordered 
            either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">The colors for the quads. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/4 the number of vertices (i.e. the number 
            of quads), each color is assumed to correspond to all 4 vertices of the 
            corresponding quad.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddQuads(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. 
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddQuads(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">The colors for the quads. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/4 the number of vertices (i.e. the number 
            of quads), each color is assumed to correspond to all 4 vertices of the 
            corresponding quad.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddHexagon(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d,System.Double,ObservatoryLib.IColor,ObservatoryLib.HexagonOrientation,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single hexagon to the drawing.
            </summary>
      <param name="b">
      </param>
      <param name="xy">The center of the hexagon.</param>
      <param name="radius">The radius of a circle 
            which circumscribes the hexagon.</param>
      <param name="color">The color fo the hexagon.</param>
      <param name="orientation">Specifies the rotation of the hexagon.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions2D.AddHexagons(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector2d[],System.Double[],ObservatoryLib.IColor[],ObservatoryLib.HexagonOrientation,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of hexagons to the drawing. The lengths of the positions, radii,
            and color arrays must all be the same.
            </summary>
      <param name="b">
      </param>
      <param name="xy">Centers of the hexagons.</param>
      <param name="radii">Radii of hexagons. That is, the radius of a circle 
            which circumscribes the hexagon.</param>
      <param name="colors">The colors of the hexagons.</param>
      <param name="orientation">Specifies the rotation of the hexagons.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="T:ObservatoryLib.IDrawingBuilderRealExtensions3D">
      <summary>
            These methods are all 1:1 with methods in the generic 2D drawing builder
            extensions. There is no cascading within this class! These methods circumvent 
            the 'shortcoming' in C# wherein I can't implicitly type-convert on an array
            using an implicit cast.
            NOTE: Above statement NOT true. There are a number of places where I am using
            a Vector3d in place of 2 TX or TYs....
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoint(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.IColor,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoint(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,System.Double,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoint(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Drawing.Color,System.Nullable{System.Double},System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single point to the drawing. NOTE: For performance reasons,
            use AddPoints() if possible when adding a large number of points.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.IColor,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],System.Double,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.Drawing.Color,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.IColor[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],System.Double[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],System.Double,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.Drawing.Color,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],System.Double[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="z1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="z2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="p">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="p">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="p">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="p">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,System.Double,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddLineBox(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 4 line segments to the drawing by connecting the specified vertices
            in order, and connected the first to the last.
            </summary>
      <param name="b">
      </param>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <param name="p3">
      </param>
      <param name="p4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddTri(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single triangle to the drawing. NOTE: For performance reasons,
            use AddTris() if possible when adding a large number of triangles.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddTris(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles to the drawing. The i-th element of the X, Y, and Z
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 3 points correspond to the 3 vertices
            of the first triangles, the next 3 are correspond to the 3 vertices 
            of the second triangle, and so on.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddTris(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles to the drawing. The i-th element of the X, Y, and Z
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 3 points correspond to the 3 vertices
            of the first triangles, the next 3 are correspond to the 3 vertices 
            of the second triangle, and so on.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">The colors for the triangles. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/3 the number of vertices (i.e. the number 
            of triangles), each color is assumed to correspond to all 3 vertices of the 
            corresponding triangle.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddTris(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of triangles to the drawing. 
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddTris(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of triangles to the drawing. 
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">The colors for the triangles. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/3 the number of vertices (i.e. the number 
            of triangles), each color is assumed to correspond to all 3 vertices of the 
            corresponding triangle.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,System.Double,System.Double,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="c3">
      </param>
      <param name="c4">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddQuad(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds 2 triangles to the drawing, forming the appearance of a quad. 
            NOTE: For performance reasons, use AddTris() or AddQuads() if possible 
            when adding a large number of triangles or quads.
            The 4 vertices can be ordered either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
      <param name="v4">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddQuads(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 4 points correspond to the 4 vertices
            of the first quad, the next 4 correspond to the 4 vertices 
            of the second quad, and so on. The 4 vertices for each quad can be ordered 
            either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddQuads(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},System.Double[],System.Double[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 4 points correspond to the 4 vertices
            of the first quad, the next 4 correspond to the 4 vertices 
            of the second quad, and so on. The 4 vertices for each quad can be ordered 
            either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="c">The colors for the quads. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/4 the number of vertices (i.e. the number 
            of quads), each color is assumed to correspond to all 4 vertices of the 
            corresponding quad.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddQuads(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. 
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealExtensions3D.AddQuads(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real},ObservatoryLib.V3{ObservatoryLib.Real,ObservatoryLib.Real,ObservatoryLib.Real}},ObservatoryLib.Vector3d[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. 
            </summary>
      <param name="b">
      </param>
      <param name="v">
      </param>
      <param name="c">The colors for the quads. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/4 the number of vertices (i.e. the number 
            of quads), each color is assumed to correspond to all 4 vertices of the 
            corresponding quad.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="T:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D">
      <summary>
            These methods are all 1:1 with methods in the generic 2D drawing builder
            extensions. There is no cascading within this class! These methods circumvent 
            the 'shortcoming' in C# wherein I can't implicitly type-convert on an array
            using an implicit cast.
            NOTE: Above statement NOT true. There are a number of places where I am using
            a Vector2d in place of 2 TX or TYs....
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddPoints(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],System.Double[],System.Nullable{System.Double}[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of points to the drawing, all with the same (Guid) name.
            </summary>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime,System.Double,System.DateTime,System.Double,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime,System.Double,System.DateTime,System.Double,System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime,System.Double,System.DateTime,System.Double,ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLine(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime,System.Double,System.DateTime,System.Double,ObservatoryLib.IColor,ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a single line segment to the drawing. NOTE: For performance reasons,
            use AddLines() if possible when adding a large number of lines.
            </summary>
      <param name="b">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLinesConnected(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            The first and last points are NOT connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],System.Double[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.Drawing.Color[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],System.Double,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddLineLoop(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.Drawing.Color,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of lines to the drawing. Line segments are drawn between adjacent
            points in the array, e.g. the first is connected to the second, 
            the second is connected to the third, and so on. 
            Additionally, The first and last points are also connected to each other.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddTris(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles to the drawing. The i-th element of the X and Y
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 3 points correspond to the 3 vertices
            of the first triangles, the next 3 are correspond to the 3 vertices 
            of the second triangle, and so on.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddTris(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Add a set of triangles to the drawing. The i-th element of the X and Y
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 3 points correspond to the 3 vertices
            of the first triangles, the next 3 are correspond to the 3 vertices 
            of the second triangle, and so on.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">The colors for the triangles. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/3 the number of vertices (i.e. the number 
            of triangles), each color is assumed to correspond to all 3 vertices of the 
            corresponding triangle.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddQuads(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.IColor,System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 4 points correspond to the 4 vertices
            of the first quad, the next 4 correspond to the 4 vertices 
            of the second quad, and so on. The 4 vertices for each quad can be ordered 
            either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">
      </param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="M:ObservatoryLib.IDrawingBuilderRealTimeExtensions2D.AddQuads(ObservatoryLib.IDrawingBuilder{ObservatoryLib.Point2{ObservatoryLib.RealTime,ObservatoryLib.Real},ObservatoryLib.V2{ObservatoryLib.RealTime,ObservatoryLib.Real}},System.DateTime[],System.Double[],ObservatoryLib.IColor[],System.Nullable{System.Guid},System.Boolean)">
      <summary>
            Adds a set of quads to the drawing. The i-th element of the X and Y 
            arrays are assumed to correspond to each other. Each array is ordered 
            such that the first 4 points correspond to the 4 vertices
            of the first quad, the next 4 correspond to the 4 vertices 
            of the second quad, and so on. The 4 vertices for each quad can be ordered 
            either clockwise or counterclockwise.
            </summary>
      <param name="b">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="c">The colors for the quads. If the length of this array is 
            equal to the number of vertices, each color corresponds to a single vertex. 
            If the length of this array is 1/4 the number of vertices (i.e. the number 
            of quads), each color is assumed to correspond to all 4 vertices of the 
            corresponding quad.</param>
      <param name="name">
      </param>
      <param name="commit">
      </param>
    </member>
    <member name="T:ObservatoryLib.LineDrawingBuilder`2">
      <summary>
            Enables creation and mutation of the source information for a 
            Plottable Drawing, i.e. a set of verices and elements, which can be
            "frozen" into a Drawing Package, but one or more items within may be
            updated with efficient re-use of existing buffers, both in CPU and
            GPU memory.
            </summary>
    </member>
    <member name="T:ObservatoryLib.PointDrawingBuilder`2">
      <summary>
            Enables creation and mutation of the source information for a 
            Plottable Drawing, i.e. a set of verices and elements, which can be
            "frozen" into a Drawing Package, but one or more items within may be
            updated with efficient re-use of existing buffers, both in CPU and
            GPU memory.
            </summary>
    </member>
    <member name="T:ObservatoryLib.TriDrawingBuilder`2">
      <summary>
            Enables creation and mutation of the source information for a 
            Plottable Drawing, i.e. a set of verices and elements, which can be
            "frozen" into a Drawing Package, but one or more items within may be
            updated with efficient re-use of existing buffers, both in CPU and
            GPU memory. TODO: outdated
            </summary>
    </member>
    <member name="F:ObservatoryLib.TriDrawingBuilder`2._Points">
      <summary>
            The list of points, maintained in an approrpriate order.
            </summary>
    </member>
    <member name="F:ObservatoryLib.TriDrawingBuilder`2._Elements">
      <summary>
            All the triangle elements, which reference the points in the list.
            </summary>
    </member>
    <member name="F:ObservatoryLib.TriDrawingBuilder`2._Generator">
      <summary>
            A mechanism for generating the lowest unpopulated index.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ColorExtensions.WithAlpha(ObservatoryLib.Drawing.Color,System.Double)">
      <summary>
            Returns a new Color whose Alpha value has been replaced by a value that 
            the *fractional* value you provided. Input Alpha ranges from 0 
            (fully transparent) to 1 (fully opaque); output Alpha will range from 0 to
            255 accordingly.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ColorExtensions.Brighten(ObservatoryLib.Drawing.Color,System.Double)">
      <summary>
            0 does nothing; 1 makes it completely white.
            </summary>
      <param name="c">
      </param>
      <param name="amount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ColorExtensions.Darken(ObservatoryLib.Drawing.Color,System.Double)">
      <summary>
            0 does nothing; 1 makes it completely black.
            </summary>
      <param name="c">
      </param>
      <param name="amount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ColorExtensions.ModulateBrightness(ObservatoryLib.Drawing.Color,System.Double)">
      <summary>
            Positive number means brighter, negative means darker.
            Each channel goes a fraction of the way to the upper/lower limit.
            </summary>
      <param name="c">
      </param>
      <param name="amount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:ObservatoryLib.ColorMap._Interp">
      <summary>
            Values on the interval [0,1] representing the color values to be
            used to represent quantitive (key) values.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ColorMap.GetColor(System.Double)">
      <summary>
            Gets the color that represents the fractional (0-&gt;1) value input.
            </summary>
      <param name="frac">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.Constants">
      <summary>
            Configured variables which are not expected to ever be changed by the user.
            </summary>
    </member>
    <member name="T:ObservatoryLib.DataSet">
      <summary>
            A collection of observations.
            </summary>
    </member>
    <member name="F:ObservatoryLib.DataSet.Name">
      <summary>
            The name of this Data Set.
            </summary>
    </member>
    <member name="F:ObservatoryLib.DataSet.Data">
      <summary>
            The columns of this Data Set. Each is the same length, and 
            the same (ordered) entry in each column corresponds to the
            same observation.
            </summary>
    </member>
    <member name="M:ObservatoryLib.DataSet.Column(System.Int32)">
      <summary>
            Gets the column at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.DataPointExtensions.ToNumeric(System.Object)">
      <summary>
            Use only on Primitive types.
            </summary>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.FriendlyCollection`1">
      <summary>
            A wrapper around Dictionary{string,T} that enables you to manage 
            names more easily.
            </summary>
    </member>
    <member name="F:ObservatoryLib.PlottableDataSet`4.Variables">
      <summary>
            The variables which have been chosen to display on each of the
            dimensions. String values are null if no variable is chosen for a given 
            dimension.
            </summary>
    </member>
    <member name="T:ObservatoryLib.IdGenerator">
      <summary>
            Generates an int ID that is not presently in use by the set. 
            Allows you to stop using an int, allowing it to be reused once again.
            The int returned by Next() is always the least non-negative int that
            is not already in use. Intended to minimize the need for shuffling
            data within a list whose size changes only slightly as many elements
            are replaced, removed, or re-added.
            </summary>
    </member>
    <member name="T:ObservatoryLib.LastItemOnlyQueue">
      <summary>
            Runs the actions as fast as it can, but skips ones it wasn't able
            to do in favor of running the most recent action.
            </summary>
    </member>
    <member name="T:ObservatoryLib.ObsInteropTest">
      <summary>
            class comments go here
            </summary>
    </member>
    <member name="F:ObservatoryLib.ObsInteropTest.gfield">
      <summary>
            field comments go here gfield
            </summary>
    </member>
    <member name="F:ObservatoryLib.ObsInteropTest.rfield">
      <summary>
            field comments go here rfield
            </summary>
    </member>
    <member name="F:ObservatoryLib.ObsInteropTest.vfield">
      <summary>
            field comments go here vfield
            </summary>
    </member>
    <member name="M:ObservatoryLib.ObsInteropTest.#ctor(ObservatoryLib.Vector2d,System.Guid[],ObservatoryLib.Real[])">
      <summary>
            construct part 1
            </summary>
      <param name="v">param called v</param>
      <param name="g">param called g</param>
      <param name="r">param called r</param>
    </member>
    <member name="M:ObservatoryLib.ObsInteropTest.#ctor(ObservatoryLib.Vector2d,ObservatoryLib.Real[],System.Guid[])">
      <summary>
            constructor part 2. no param comments.
            </summary>
      <param name="v">
      </param>
      <param name="r">
      </param>
      <param name="g">
      </param>
    </member>
    <member name="M:ObservatoryLib.ObsInteropTest.DoStuff1(System.Guid[],ObservatoryLib.Real[],ObservatoryLib.Vector2d)">
      <summary>
            comments for dostuff1
            </summary>
      <param name="g">this is a param g</param>
      <param name="r">this is a param r</param>
      <param name="v">this is a param v</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsInteropTest.DoStuffStatic1(System.Guid[],ObservatoryLib.Real[],ObservatoryLib.Vector2d)">
      <summary>
            comments for dostuff1static
            </summary>
      <param name="g">this is a param g</param>
      <param name="r">this is a param r</param>
      <param name="v">this is a param v</param>
      <returns>
      </returns>
    </member>
    <member name="P:ObservatoryLib.ObsInteropTest.gprop">
      <summary>
            prop comments g
            </summary>
    </member>
    <member name="P:ObservatoryLib.ObsInteropTest.rprop">
      <summary>
            prop comments r
            </summary>
    </member>
    <member name="P:ObservatoryLib.ObsInteropTest.vprop">
      <summary>
            prop comments v
            </summary>
    </member>
    <member name="E:ObservatoryLib.ObsInteropTest.ObsEvent2Args">
      <summary>
            this is an event comment...
            </summary>
    </member>
    <member name="T:ObservatoryLib.ObsInteropTest`2">
      <summary>
            class with generic params
            </summary>
      <typeparam name="T1">description of t1</typeparam>
      <typeparam name="T2">description of t2</typeparam>
    </member>
    <member name="F:ObservatoryLib.ObsInteropTest`2.A">
      <summary>
            comments for generic field A
            </summary>
    </member>
    <member name="M:ObservatoryLib.ObsInteropTest`2.#ctor(`0,`1)">
      <summary>
            constructor with 2 generic args
            </summary>
      <param name="a">bdfgb dfgb </param>
      <param name="b">dfgbdfg g bfgb </param>
    </member>
    <member name="M:ObservatoryLib.ObsInteropTest`2.DoStuffGeneric(`1)">
      <summary>
            summary of method
            </summary>
      <param name="abc">param description abc</param>
      <returns>return comment</returns>
      <remarks>remarks comment</remarks>
    </member>
    <member name="M:ObservatoryLib.ObsInteropTest`2.ThisMethodIsSuperGeneric``1(`0,`1,``0)">
      <summary>
            summary comment
            </summary>
      <typeparam name="T3">lkdfvdfv </typeparam>
      <param name="t1">ssdfgvsdf</param>
      <param name="t2">fghngfhn</param>
      <param name="t3">fghnfghn</param>
      <returns>gjmfhngbfvd</returns>
    </member>
    <member name="P:ObservatoryLib.ObsInteropTest`2.B">
      <summary>
            comments for generic prop B
            </summary>
    </member>
    <member name="M:ObservatoryLib.ObsPyTestExtenstions.DoStuffExt1(ObservatoryLib.ObsInteropTest,System.Guid[],ObservatoryLib.Real[],ObservatoryLib.Vector2d)">
      <summary>
            commments for an extension method 1.
            </summary>
      <param name="o">extension method param for self</param>
      <param name="g">extension method param g</param>
      <param name="r">extension method param r</param>
      <param name="v">extension method param v</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsPyTestExtenstions.DoStuffExt2(ObservatoryLib.ObsInteropTest,System.Guid[],ObservatoryLib.Real[],ObservatoryLib.Vector2d)">
      <summary>
            comments for ext method. no param comments. but remarks!
            </summary>
      <param name="o">
      </param>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="v">
      </param>
      <returns>return info goes here</returns>
      <remarks>my remarks are here</remarks>
    </member>
    <member name="T:ObservatoryLib.ObsRandom">
      <summary>
            Supports generation of random numbers and vectors according to commonly-used
            mathematical distributions (e.g. uniform, normal).
            </summary>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.#ctor(System.Nullable{System.Int32})">
      <summary>
            Creates a new random-number generator. 
            If no seed is specified, a time-based value is supplied automatically.
            Multiple instances constructed with the same seed will produce identical
            values for identical public method calls.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextDouble(System.Double,System.Double)">
      <summary>
            Draws a value from a uniform distribution over the specified range.
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextReal(System.Double,System.Double)">
      <summary>
            Draws a Real-value from a uniform distribution over the specified range.
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextDateTime(System.DateTime,System.DateTime)">
      <summary>
            Draws a DateTime from a uniform distribution over the specified interval.
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextVector2d(System.Double,System.Double)">
      <summary>
            Returns a Vector2d whose X and Y components are each independently drawn 
            from a uniform distribution over the specified range.
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextVector2d(ObservatoryLib.Vector2d,ObservatoryLib.Vector2d)">
      <summary>
            Returns a Vector2d drawn from a uniform distribution over the rectangle
            defined by the specified min and max.
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextVector3d(System.Double,System.Double)">
      <summary>
            Returns a Vector3d drawn from a uniform distribution over the cube defined
            by the specified min and max.
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextVector3d(ObservatoryLib.Vector3d,ObservatoryLib.Vector3d)">
      <summary>
            Returns a Vector3d drawn from a uniform distribution over the rectangular
            solid defined by the specified min and max.
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextDoubles(System.Int32,System.Double,System.Double)">
      <summary>
            Draws n values from a uniform distribution over the specified range.
            </summary>
      <param name="n">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextReals(System.Int32,System.Double,System.Double)">
      <summary>
            Draws n Real-values from a uniform distribution over the specified range.
            </summary>
      <param name="n">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextDateTimes(System.Int32,System.DateTime,System.DateTime)">
      <summary>
            Draws n DateTimes from a uniform distribution over the specified interval.
            </summary>
      <param name="n">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextVector2ds(System.Int32,System.Double,System.Double)">
      <summary>
            Returns n Vector2ds whose X and Y components are each independently drawn 
            from a uniform distribution over the specified range.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextVector2ds(System.Int32,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d)">
      <summary>
            Returns n Vector2ds drawn from a uniform distribution over the rectangle
            defined by the specified min and max.
            </summary>
      <param name="n">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextVector3ds(System.Int32,System.Double,System.Double)">
      <summary>
            Returns n Vector3ds drawn from a uniform distribution over the cube defined
            by the specified min and max.
            </summary>
      <param name="n">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextVector3ds(System.Int32,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d)">
      <summary>
            Returns n Vector3ds drawn from a uniform distribution over the rectangular
            solid defined by the specified min and max.
            </summary>
      <param name="n">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextNormal(System.Double,System.Double)">
      <summary>
            Draws a value from a Normal Distribution with the specified mean and sigma.
            </summary>
      <param name="mean">
      </param>
      <param name="sigma">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextStandardNormal">
      <summary>
            Draws a value from the Standard Normal Distribution (mean=0, sigma=1)/
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextChi(System.Int32)">
      <summary>
            Draws a value from a Chi Distribution with the specified number of 
            degrees of freedom.
            </summary>
      <param name="dof">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextNChis(System.Int32,System.Int32,System.Double)">
      <summary>
            Draws N values from a Chi Distribution with the specified number of
            degrees of freedom, and scales the result by the specified value.
            </summary>
      <param name="n">
      </param>
      <param name="dof">
      </param>
      <param name="scale">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextNormalValues(System.Int32,System.Double,System.Double)">
      <summary>
            Draws n values from a Normal Distribution with the specified mean and sigma.
            </summary>
      <param name="n">
      </param>
      <param name="mean">
      </param>
      <param name="sigma">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextMultiVarNormal2d(ObservatoryLib.Vector2d,ObservatoryLib.Vector2d)">
      <summary>
            Draws a 2D point from a covariance-free Multivariate Normal Distribution 
            with the specified mean and sigma. 
            </summary>
      <param name="mean">
      </param>
      <param name="sigma">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextMultiVarNormal3d(ObservatoryLib.Vector3d,ObservatoryLib.Vector3d)">
      <summary>
            Draws a 3D point from a covariance-free Multivariate Normal Distribution 
            with the specified mean and sigma. 
            </summary>
      <param name="mean">
      </param>
      <param name="sigma">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextMultiVarNormal3ds(System.Int32,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d)">
      <summary>
            Returns n Vector3ds drawn from a covariance-free Multivariate Normal 
            Distribution with the specified mean and sigma. 
            </summary>
      <param name="n">
      </param>
      <param name="mean">
      </param>
      <param name="sigma">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextMultiVarNormal2ds(System.Int32,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d)">
      <summary>
            Returns n Vector2ds drawn from a covariance-free Multivariate Normal 
            Distribution with the specified mean and sigma. 
            </summary>
      <param name="n">
      </param>
      <param name="mean">
      </param>
      <param name="sigma">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ObsRandom.NextAlpha">
      <summary>
            Randomly selected an upper-case alphabetical character ('A' - 'Z'), each
            having equal probability of being drawn.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.OneToManyMap`2">
      <summary>
            A mapping from a set of "owners" to each one's set of "resources". 
            Each resource can only be owned by one owner. Each owner can have
            any number of resources. Supports constant-time look up on both
            owner and resource.
            </summary>
      <typeparam name="TOwner">
      </typeparam>
      <typeparam name="TResource">
      </typeparam>
    </member>
    <member name="T:ObservatoryLib.OrderedDictionary`2">
      <summary>
            Provides constant-time look-up by key in a set of key-value pairs,
            and maintains the order in which the items were added.
            </summary>
    </member>
    <member name="M:ObservatoryLib.OrderedDictionary`2.AddOrReplace(`0,`1)">
      <summary>
            Returns true if it already contained the key
            </summary>
      <param name="key">
      </param>
      <param name="newValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.OrderedDictionary`2.TryReplace(`0,`1)">
      <summary>
            Returns true if it already contained the key
            </summary>
      <param name="key">
      </param>
      <param name="newValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.NTree`1">
      <summary>
            A tree where each node can have as many child nodes as desired. 
            For each item in the tree, we can get all its children, and remove 
            them.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:ObservatoryLib.IProvider`1">
      <summary>
            Provides access to a single shared item, and notifies clients when that item
            is updated or replaced.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:ObservatoryLib.IProvider`1.Modified(ObservatoryLib.ClientToken)">
      <summary>
            Call to indicate that the item has been modified internally without a call
            to the Set method. Call this method *after* modifying the item.
            </summary>
      <param name="token">A token indicating the identity of the client 
            that modified the item.</param>
    </member>
    <member name="M:ObservatoryLib.IProvider`1.Set(`0,ObservatoryLib.ClientToken)">
      <summary>
            Replaces the item with a new reference or value.
            </summary>
      <param name="value">The new reference or value for the item.</param>
      <param name="token">A token indicating the identity of the 
            client setting the new value.</param>
    </member>
    <member name="M:ObservatoryLib.IProvider`1.Subscribe(System.Action{ObservatoryLib.Result{`0}},ObservatoryLib.ClientToken)">
      <summary>
            Subscribe a delegate which will be called whenever this 
            item is updated or replaced. The delegate is only called if the token 
            supplied in the Set or Modified method does NOT match the token specified 
            here.
            </summary>
      <param name="callBack">A delegate that will be called when the item 
            is modified or replaced by a different client.</param>
      <param name="token">A token indicating the identity 
            of the client which is subscribing.</param>
    </member>
    <member name="P:ObservatoryLib.IProvider`1.Value">
      <summary>
            Returns the current item.
            </summary>
    </member>
    <member name="T:ObservatoryLib.IProvider`2">
      <summary>
            Provides access to a collection of key-value pairs that are shared among
            a set of potentially many clients. Notifies clients when items are modified 
            or replaced.
            </summary>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="M:ObservatoryLib.IProvider`2.Set(`0,`1,ObservatoryLib.ClientToken)">
      <summary>
            Adds or updates the item with the specified key to have the specified value.
            </summary>
      <param name="key">
      </param>
      <param name="value">
      </param>
      <param name="token">A token indicating the identity of the client 
            that is replacing or adding the item.</param>
    </member>
    <member name="M:ObservatoryLib.IProvider`2.Modified(`0,ObservatoryLib.ClientToken)">
      <summary>
            Call to indicate that the item has been modified internally without 
            a call to the Set method. Call this method *after* modifying the item.
            </summary>
      <param name="key">
      </param>
      <param name="token">
      </param>
    </member>
    <member name="M:ObservatoryLib.IProvider`2.Remove(`0,ObservatoryLib.ClientToken)">
      <summary>
            Remove an item from the collection with the specified key.
            </summary>
      <param name="key">
      </param>
      <param name="token">A token indicating the identity of the client 
            that is removing the item.</param>
    </member>
    <member name="M:ObservatoryLib.IProvider`2.Subscribe(System.Action{`0,`1},ObservatoryLib.ClientToken)">
      <summary>
            Subscribe a delegate which will be called anytime *any* of the items in
            the collection is modified, replaced, removed, or added. The delegate is 
            only called if the token supplied in the Set or Modify method does NOT 
            match the token specified here.
            </summary>
      <param name="callBack">The delegate which will be called.</param>
      <param name="token">A token indicating the identity 
            of the client which is subscribing.</param>
    </member>
    <member name="P:ObservatoryLib.IProvider`2.Keys">
      <summary>
            Returns all the keys in the collection.
            </summary>
    </member>
    <member name="P:ObservatoryLib.IProvider`2.Item(`0)">
      <summary>
            Gets the corresponding value for the specified key.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.UniqueDictionary`2">
      <summary>
            A class that enables constant-time look-up on both the keys and the
            values in a Dictionary{TKey, TValue}. Both the keys and the values
            must be unique.
            </summary>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="M:ObservatoryLib.IDisplayableExtensions.Display(ObservatoryLib.IDisplayable,System.Nullable{ObservatoryLib.Drawing.Size},System.Boolean,System.String)">
      <summary>
            Displays this Visualization in a new window by itself.
            </summary>
      <param name="fig">
      </param>
      <param name="size">If specified, the initial size (in pixels) of the window 
            that will be launched.</param>
      <param name="wait">If true, blocks the calling thread until the new window 
            has been displayed and the first frame has been rendered. If false, control
            returns to the calling thread immediately.</param>
      <param name="title">An optional title for the window.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.IDisplayableExtensions.Display(ObservatoryLib.IDisplayable,ObservatoryLib.FigureResolution,System.Nullable{ObservatoryLib.Drawing.Point},System.Boolean,System.String)">
      <summary>
            Displays this Visualization in a new window by itself.
            </summary>
      <param name="fig">
      </param>
      <param name="resolution">The size of the rendered area, chosen from a 
            set of standards. Note: the window itself is slightly larger than the 
            rendered area due to a header bar and window border.</param>
      <param name="position">The initial upper-left corner of the window 
            (in pixels from the screen's upper left).</param>
      <param name="wait">If true, blocks the calling thread until the new window 
            has been displayed and the first frame has been rendered. If false, control
            returns to the calling thread immediately.</param>
      <param name="title">An optional title for the window.</param>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.Viz">
      <summary>
            A single visualization, having a single vantage point and a single 
            synchronization life-cycle.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Viz.Display(ObservatoryLib.Drawing.Rectangle,System.Boolean,System.String)">
      <summary>
            Displays this Visualization in a new window by itself.
            </summary>
      <param name="window">The pixel rectangle (origin is in the upper left) 
            on the screen where this Visualization will be displayed.</param>
      <param name="wait">If true, blocks the calling thread until the new window 
            has been displayed and the first frame has been rendered. If false, control
            returns to the calling thread immediately.</param>
      <param name="title">An optional title for the window.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Viz.ClearAll">
      <summary>
            Removes all [ISyncable] items from the Visualization, except those which
            are part of the original composition (i.e. those added by Observatory for 
            basic control and interaction).
            </summary>
    </member>
    <member name="M:ObservatoryLib.Viz.Add(ObservatoryLib.ISyncable,System.String)">
      <summary>
            Adds the item to this Visualization. It will be synchronized and
            rendered in each subsequent frame. Will not take effect until the current
            frame completes, if a current frame is underway.
            </summary>
      <param name="item">
      </param>
      <param name="name">An optional desired name, which serves as a handle to the 
            item for future reference.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Viz.Add(ObservatoryLib.ISyncable[],System.String)">
      <summary>
            Adds the items to this Visualization. It will be synchronized and
            rendered in each subsequent frame. Will not take effect until the current
            frame completes, if a current frame is underway.
            </summary>
      <param name="item">
      </param>
      <param name="name">An optional desired name, which serves as a handle to the 
            item for future reference.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Viz.Remove(System.String)">
      <summary>
            Removes an item from the Visualization, if it is present. 
            </summary>
      <param name="name">The name *returned* by the call 
            to Add the item originally.</param>
      <returns>True if the item was present; false if the item was not.</returns>
    </member>
    <member name="M:ObservatoryLib.Viz.SaveScreenShot(System.String)">
      <summary>
            Save a screen shot of the visualization to file.
            </summary>
      <param name="filename">
            If the filename is not specified, a dialog box will be shown.</param>
    </member>
    <member name="E:ObservatoryLib.Viz.NamedItemClicked">
      <summary>
            Fired whenever the user clicks on an item in this plot for which
            a unique identity has been established.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Hist`1.ShowHideStatsBox(System.Boolean)">
      <summary>
            Caution. Only works AFTER Display(). Sync stackup bug.
            </summary>
      <param name="show">
      </param>
    </member>
    <member name="M:ObservatoryLib.Hist`1.UpdateStatsBoxPlacement(ObservatoryLib.Placement)">
      <summary>
            Caution. Only works AFTER Display(). Sync stackup bug.
            </summary>
      <param name="placement">
      </param>
    </member>
    <member name="M:ObservatoryLib.FigureWindow.MaximizeWindow">
      <summary>
            Maximize the window containing this plot set. 
            If already displayed as a Window, takes effect immediately. If displayed
            as a window later, takes effect upon display. If displayed as a control, 
            does nothing.
            </summary>
    </member>
    <member name="M:ObservatoryLib.FigureWindow.MinimizeWindow">
      <summary>
            Minimize the window containing this plot set. 
            If already displayed as a Window, takes effect immediately. If displayed
            as a window later, takes effect upon display. If displayed as a control, 
            does nothing.
            </summary>
    </member>
    <member name="M:ObservatoryLib.FigureWindow.RestoreWindow">
      <summary>
            Un-maximize or un-minimize the window containing this plot set.
            If already displayed as a Window, takes effect immediately. If displayed
            as a window later, takes effect upon display. If displayed as a control, 
            does nothing.
            </summary>
    </member>
    <member name="M:ObservatoryLib.FigureWindow.SetWindowLocationAndSize(ObservatoryLib.Drawing.Rectangle)">
      <summary>
            Set size and location (in pixels) of the window containing this plot set.
            If already displayed as a Window, takes effect immediately. If displayed
            as a window later, takes effect upon display. If displayed as a control, 
            does nothing.
            </summary>
    </member>
    <member name="M:ObservatoryLib.FigureWindow.SetWindowLocation(System.Int32,System.Int32)">
      <summary>
            Set location of window containing this plot set.
            If already displayed as a Window, takes effect immediately. If displayed
            as a window later, takes effect upon display. If displayed as a control, 
            does nothing.
            </summary>
    </member>
    <member name="M:ObservatoryLib.FigureWindow.SetWindowSize(System.Int32,System.Int32)">
      <summary>
            Set size of window containing this plot set without changing its upper-left.
            If already displayed as a Window, takes effect immediately. If displayed
            as a window later, takes effect upon display. If displayed as a control, 
            does nothing.
            </summary>
    </member>
    <member name="M:ObservatoryLib.FigureWindow.CloseWindow">
      <summary>
            Close the window displaying this plot set. 
            If already displayed as a Window, takes effect immediately. If displayed
            as a window later, takes effect upon display. If displayed as a control, 
            does nothing.
            </summary>
    </member>
    <member name="T:ObservatoryLib.Figure">
      <summary>
            A set of 1 or more plots that can either be displayed in a single Windows
            Control or a single WPF Window. Allocated space can be sub-divied among 
            individual plots by explicit specification or by means of "tiles."
            </summary>
    </member>
    <member name="M:ObservatoryLib.Figure.#ctor(ObservatoryLib.IPlotSyncBase[])">
      <summary>
            Create a PlotSet with the specified number of horizontal and vertical 
            "tiles" which can be referred to when adding individual plots to this set.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Figure.Display(ObservatoryLib.Drawing.Rectangle,System.Boolean,System.String)">
      <summary>
            Displays this Figure in a new window.
            </summary>
      <param name="window">The pixel rectangle (origin is in the upper left) 
            on the screen where this Visualization will be displayed.</param>
      <param name="wait">If true, blocks the calling thread until the new window 
            has been displayed and the first frame has been rendered. If false, control
            returns to the calling thread immediately.</param>
      <param name="title">An optional title for the window.</param>
      <returns>
      </returns>
    </member>
    <member name="F:ObservatoryLib.MultiSyncHost._Renderer">
      <summary>
            The dispatcher that is associated with the Windows Forms Control.
            </summary>
    </member>
    <member name="M:ObservatoryLib.MultiSyncHost.#ctor(System.Func{ObservatoryLib.Drawing.Size,ObservatoryLib.OrderedDictionary{ObservatoryLib.IPlotSyncBase,ObservatoryLib.Drawing.Rectangle}},System.Collections.Generic.List{ObservatoryLib.IPlotSyncBase},ObservatoryLib.IGLControl)">
      <summary>
            This is the ONLY time it is OK to create the
            renderer and it's corresponding GLControl! That is, when
            we know we are on the UI thread.
            </summary>
    </member>
    <member name="M:ObservatoryLib.MultiSyncHost.OnSizeUpdated(ObservatoryLib.Drawing.Point,ObservatoryLib.Drawing.Size)">
      <summary>
            Call to update the size and relative position of the host control within
            its parent control.
            </summary>
      <param name="p">
      </param>
      <param name="s">
      </param>
    </member>
    <member name="M:ObservatoryLib.MultiSyncHost.Dispose">
      <summary>
            Call to free resources when this object is no longer needed. Unclear what
            resources exactly are/need-to-be freed.
            </summary>
    </member>
    <member name="P:ObservatoryLib.MultiSyncHost.Control">
      <summary>
            The Windows Forms Control that will host the plot content.
            </summary>
    </member>
    <member name="T:ObservatoryLib.ISyncable">
      <summary>
            The minimum set of functionality that must be provided for any item
            to live within the Observatory plot synchronization life-cycle.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ISyncable.Synchronize">
      <summary>
            Called to signify that it is time to update the item's 
            internal state, so that it is update-to-date with events that have
            occurred, and internally consistent, even if such operations are
            expensive. The state variables managed by the plot sync will not 
            change between this time, and the next time a frame is drawn. 
            If nothing has necessitated any changes since the last
            frame, no action may be required.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ISyncable.Serialize">
      <summary>
            Called after Synchronize() and before rendering. There will be no more
            sync actions that affect any syncable between now and when the next frame
            is rendered.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ISyncable.WasAddedToSync(ObservatoryLib.IPlotSyncBase)">
      <summary>
            Called when this item is added to a visualization. It 
            should subscribe to whichever events it needs from the 
            state provider, or save a reference for later.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ISyncable.RemoveFromSync">
      <summary>
            No longer being plotted. Free all resources as necessary.
            </summary>
    </member>
    <member name="P:ObservatoryLib.ISyncable.IsOutOfSync">
      <summary>
            Whether or not this item needs to be synchronized. 
            </summary>
    </member>
    <member name="P:ObservatoryLib.ISyncable.Parent">
      <summary>
            Null iff the item is at the root of a tree or has never been added yet.
            Otherwise, the item's immediate parent in its syncable tree.
            </summary>
    </member>
    <member name="E:ObservatoryLib.ISyncable.BecameOutOfSync">
      <summary>
            Fired to signify that the item is aware that it is no longer
            up-to-date, and a call to Synchronize() is necessitated before
            it can be put in a consistent state.
            </summary>
    </member>
    <member name="T:ObservatoryLib.SyncableBase">
      <summary>
            A base class that provides essential methods for any item living within
            the plot synchronization life-cycle.
            </summary>
    </member>
    <member name="F:ObservatoryLib.SyncableBase._SyncLockBackup">
      <summary>
            Baton for locking, just in case _Sync is still null.
            </summary>
    </member>
    <member name="F:ObservatoryLib.SyncableBase._Baton">
      <summary>
            Private object for locking while internal state undergoes 
            a transition that must be atomic. If both this and the
            _SyncLock are required, grab the _SyncLock first to
            prevent deadlocks.
            </summary>
    </member>
    <member name="F:ObservatoryLib.SyncableBase.SyncableOwnerId">
      <summary>
            A single immutable identifier for this syncable. Used to identify
            which syncable item "owns" each serialized item, so that they
            can all be removed when this item is removed from the synchronizer.
            </summary>
    </member>
    <member name="F:ObservatoryLib.SyncableBase.SerializerIds">
      <summary>
            A re-usable list of IDs that represent one per serialized item.
            There is a performance benefit to reusing IDs for the "same" items
            from one frame to the next, because these items are usually of the
            same type and length of serialized buffers. Buffer allocation is
            intelligent, especially for items of fixed buffer size.
            </summary>
    </member>
    <member name="F:ObservatoryLib.SyncableBase._Sync">
      <summary>
            A reference to the plot synchronizer within which this item
            lives its life.
            </summary>
    </member>
    <member name="F:ObservatoryLib.SyncableBase._QueueBaton">
      <summary>
            A queue of work-items to be completed during the synchronization
            phase.
            </summary>
    </member>
    <member name="F:ObservatoryLib.SyncableBase._SyncTokens">
      <summary>
            A list of actions, each of which can be replaced potentially
            many times before the next Synchronization phase. Their update 
            logic is such that, for each item in the list, a more recent 
            request for action supersedes the previous one.
            </summary>
    </member>
    <member name="M:ObservatoryLib.SyncableBase.RespondWith(System.Action,System.Object)">
      <summary>
            Registers an action to be done after the current frame is
            completely rendered, but only if the sender is not this.
            </summary>
      <param name="action">
      </param>
      <param name="sender">
      </param>
    </member>
    <member name="M:ObservatoryLib.SyncableBase.DoAtSync(System.Action,ObservatoryLib.SyncActionToken,System.Boolean,ObservatoryLib.IResetWaiter)">
      <summary>
            Call anytime an action would cause either this item to change 
            either in its render appearance, or in a publicly visible way,
            such that other items in the synchronizer with it risk seeing a 
            different value during the same frame. This is very commonly used.
            </summary>
    </member>
    <member name="M:ObservatoryLib.SyncableBase.Synchronize">
      <summary>
            Called only by the plot synchronizer to complete any work that
            this item needs to perform before the current frame is sent for
            rendering.
            </summary>
    </member>
    <member name="M:ObservatoryLib.SyncableBase.Serialize">
      <summary>
            Implements ISyncable. Note that currently, only the screen items need to
            do anything with this method. 2015-12-31
            </summary>
    </member>
    <member name="M:ObservatoryLib.SyncableBase.WasAddedToSync(ObservatoryLib.IPlotSyncBase)">
      <summary>
            Called only by the plot synchronizer when this item is being added
            to its set of items to be kept in sync. Most commonly, this is the
            time for items to register for events from the plot synchronizer.
            </summary>
      <param name="sync">
      </param>
    </member>
    <member name="M:ObservatoryLib.SyncableBase.RemoveFromSync">
      <summary>
            Called only by the plot synchronizer when the item will no longer
            be kepy synchronized. At this time, the item must unregister from
            any events that it has subscribed during AddToSync.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SyncableBase.Name">
      <summary>
            Optionally-specified name, for debugging purposes.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SyncableBase._SyncLock">
      <summary>
            Baton to lock on that is respected by the plot synchronizer, and
            all syncable items that it is synchronizing, including this one.
            You need to lock on this object when making any changes to 
            externally facing values that must be consistent within one frame.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SyncableBase.Actions">
      <summary>
            The interaction manager for this item, but not its children.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SyncableBase.IsOutOfSync">
      <summary>
            Whether or not this item is out of date and will take some action
            when the Synchronize() method is called.
            </summary>
    </member>
    <member name="E:ObservatoryLib.SyncableBase.BecameOutOfSync">
      <summary>
            Event raised when the item has become out-of-sync and will need
            to perform some action in the next synchronization phase.
            </summary>
    </member>
    <member name="P:ObservatoryLib.ISyncableChild.IsVisible">
      <summary>
            Whether the item should be rendered, should a frame be generated.
            </summary>
    </member>
    <member name="T:ObservatoryLib.SyncableTreeBase`1">
      <summary>
            Extends the SyncableBase class and adds essential methods for any
            syncable item that is composed of a hierarchy of other syncable items.
            These are known as the item's children. This class helps keep a tree
            of such items all in sync.
            </summary>
      <typeparam name="TChild">
      </typeparam>
    </member>
    <member name="F:ObservatoryLib.SyncableTreeBase`1._Children">
      <summary>
            The list of all children, which are also ISyncables (and a little
            more currently because of some bad organization).
            </summary>
    </member>
    <member name="T:ObservatoryLib.ScreenBase">
      <summary>
             The base class for all content rendered to the screen. Handles 
             user inputs, sizes, and updates for rendering.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ScreenBase.CalculateContentSize">
      <summary>
            The minimum natural size of the content, in pixels. It will always be 
            allocated to a size at least this big.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ScreenBase.SetUpperLeftAbsolute(ObservatoryLib.Vector2d)">
      <summary>
            ONLY to be used to set the position of an entire tree when added to the
            Visualization itself.
            </summary>
      <param name="upperLeft">
      </param>
    </member>
    <member name="M:ObservatoryLib.ScreenBase.SetStencil(ObservatoryLib.Stencil)">
      <summary>
            Note: this does not use DoAtSync() because it is intended to (sometimes at least)
            be called directly during Serialization-time.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:ObservatoryLib.ScreenBase.LayoutAndSerialize(System.Int32,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d)">
      <summary>
            Calculate layout of your children, if you have any, and then serialize
            any arrays for rendering, if you have any. Note that the content size was
            most likely already calculated for the children in order to produce the
            value being presented here for assignment.
            </summary>
    </member>
    <member name="P:ObservatoryLib.ScreenBase.Location">
      <summary>
            Absolute location within the Visualization, in pixels from the upper left. 
            Needed by all implementing classes for serialization for rendering.
            </summary>
    </member>
    <member name="P:ObservatoryLib.ScreenBase.LayerAboveParent">
      <summary>
            The screen-plane layer of this item. Higher numbers render later, and 
            appear "on top of" lower layers.
            </summary>
    </member>
    <member name="P:ObservatoryLib.ScreenBase.Stencil">
      <summary>
            The stencil specifying absolute pixel limits on the region in which this
            item's content may be rendered. Beyond this region, any content will
            be discarded by the shaders.
            </summary>
    </member>
    <member name="F:ObservatoryLib.TileFigure._Tiles">
      <summary>
            All the plots being hosted in this set. Locations are 
            fractional [0 -&gt; 1] within the space allocated to the whole plot set.
            </summary>
    </member>
    <member name="T:ObservatoryLib.IImageSource">
      <summary>
            The source data for an image that can be efficiently added to a plot. Specific
            implementations define how the image's pixels are colored.
            </summary>
    </member>
    <member name="T:ObservatoryLib.BitmapImage">
      <summary>
            The source data for an RGB image that can be added to a plot. The image's colors
            are static, and do not respond to the plot environment.
            </summary>
    </member>
    <member name="T:ObservatoryLib.RealImage">
      <summary>
            Represents an image whose numeric-valued pixels are specified in
            data coordinates.
            </summary>
    </member>
    <member name="M:ObservatoryLib.RealImage.#ctor(System.Double[],System.Int32,System.Int32)">
      <summary>
            Specify an image with a scalar (double-precision) value at each
            pixel.
            </summary>
      <param name="values">Row major order.</param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:ObservatoryLib.Drawing`2.SetLayer(System.Int32)">
      <summary>
            Set the layer of this item as it appears in the Visualization. Items with 
            lower layers will appear behind items with higher layers. Layers must be
            strictly greater than 0. Note that all content in this drawing will appear 
            at the same layer. Subsequent calls to this method effectively override
            all prior calls. To ensure that some parts of the drawing appear above or
            below other parts, use multiple drawings.
            </summary>
      <param name="layer">
      </param>
    </member>
    <member name="T:ObservatoryLib.Drawing2">
      <summary>
            Enables the creation of drawings with points, lines, and polygons in 2D 
            real-valued space.
            </summary>
    </member>
    <member name="T:ObservatoryLib.ICoordSet`2">
      <summary>
            A quantity that has a component in each dimension of a coordinate system.
            </summary>
      <typeparam name="TDim">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="M:ObservatoryLib.CornerRounding.DistanceFromCorner(System.Double)">
      <summary>
            Imagine 2 segments in 2D that share a common point. Imagine 
            moving a circle towards that point of intersection until it
            comes it contact with both segment an equal distance along each
            from the intersection point. For a circle with radius 1, this 
            is the distance between the intersection of the segments and 
            either of the intersections with the circle.
            </summary>
      <param name="theta">The inner angle between the two segments.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.CornerRounding.InnerArc(ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,ObservatoryLib.Vector2d,System.Double)">
      <summary>
            Finds the arc of a circle with the specified radius that 
            touches (but does not cross) two line segments that share a point.
            </summary>
      <param name="p0">Non-shared point</param>
      <param name="p1">The shared point</param>
      <param name="p2">Non-shared point</param>
      <param name="radius">Radius of the circle</param>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.FourCorners">
      <summary>
            A class to represent four corners of a quadrilateral, specified
            counter-clockwise, from lower-left.
            </summary>
    </member>
    <member name="T:ObservatoryLib.Ray2">
      <summary>
            Represents a ray in 2D, with an origin and a (unit) direction.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Ray2.Origin">
      <summary>
            The origin of the ray. The ray passes through this point.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Ray2.Direction">
      <summary>
      </summary>
    </member>
    <member name="P:ObservatoryLib.Ray3.Origin">
      <summary>
            The origin of the ray. The ray passes through this point.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Ray3.Direction">
      <summary>
      </summary>
    </member>
    <member name="M:ObservatoryLib.ObsMath.NewGuid">
      <summary>
            Generates a new GUID, using the default C# implementation.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.Matrix4dtk">
      <summary>
            Represents a 4x4 matrix containing 3D rotation, scale, transform, and projection with double-precision components.
            </summary>
      <seealso cref="T:ObservatoryLib.Matrix4" />
    </member>
    <member name="F:ObservatoryLib.Matrix4dtk.Row0">
      <summary>
            Top row of the matrix
            </summary>
    </member>
    <member name="F:ObservatoryLib.Matrix4dtk.Row1">
      <summary>
            2nd row of the matrix
            </summary>
    </member>
    <member name="F:ObservatoryLib.Matrix4dtk.Row2">
      <summary>
            3rd row of the matrix
            </summary>
    </member>
    <member name="F:ObservatoryLib.Matrix4dtk.Row3">
      <summary>
            Bottom row of the matrix
            </summary>
    </member>
    <member name="F:ObservatoryLib.Matrix4dtk.Identity">
      <summary>
            The identity matrix
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.#ctor(ObservatoryLib.Vector4dtk,ObservatoryLib.Vector4dtk,ObservatoryLib.Vector4dtk,ObservatoryLib.Vector4dtk)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="row0">Top row of the matrix</param>
      <param name="row1">Second row of the matrix</param>
      <param name="row2">Third row of the matrix</param>
      <param name="row3">Bottom row of the matrix</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="m00">First item of the first row.</param>
      <param name="m01">Second item of the first row.</param>
      <param name="m02">Third item of the first row.</param>
      <param name="m03">Fourth item of the first row.</param>
      <param name="m10">First item of the second row.</param>
      <param name="m11">Second item of the second row.</param>
      <param name="m12">Third item of the second row.</param>
      <param name="m13">Fourth item of the second row.</param>
      <param name="m20">First item of the third row.</param>
      <param name="m21">Second item of the third row.</param>
      <param name="m22">Third item of the third row.</param>
      <param name="m23">First item of the third row.</param>
      <param name="m30">Fourth item of the fourth row.</param>
      <param name="m31">Second item of the fourth row.</param>
      <param name="m32">Third item of the fourth row.</param>
      <param name="m33">Fourth item of the fourth row.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Invert">
      <summary>
            Converts this instance into its inverse.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Transpose">
      <summary>
            Converts this instance into its transpose.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Normalized">
      <summary>
            Returns a normalised copy of this instance.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Normalize">
      <summary>
            Divides each element in the Matrix by the <see cref="P:ObservatoryLib.Matrix4dtk.Determinant" />.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Inverted">
      <summary>
            Returns an inverted copy of this instance.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.ClearTranslation">
      <summary>
            Returns a copy of this Matrix4d without translation.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.ClearRotation">
      <summary>
            Returns a copy of this Matrix4d without rotation.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.ClearProjection">
      <summary>
            Returns a copy of this Matrix4d without projection.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.ExtractTranslation">
      <summary>
            Returns the translation component of this instance.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.ExtractScale">
      <summary>
            Returns the scale component of this instance.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.ExtractProjection">
      <summary>
            Returns the projection component of this instance.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateFromAxisAngle(ObservatoryLib.Vector3d,System.Double,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
      <param name="axis">The axis to rotate about.</param>
      <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
      <param name="result">A matrix instance.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateFromAxisAngle(ObservatoryLib.Vector3d,System.Double)">
      <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
      <param name="axis">The axis to rotate about.</param>
      <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
      <returns>A matrix instance.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateRotationX(System.Double,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
      <param name="angle">The counter-clockwise angle in radians.</param>
      <param name="result">The resulting Matrix4d instance.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateRotationX(System.Double)">
      <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
      <param name="angle">The counter-clockwise angle in radians.</param>
      <returns>The resulting Matrix4d instance.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateRotationY(System.Double,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
      <param name="angle">The counter-clockwise angle in radians.</param>
      <param name="result">The resulting Matrix4d instance.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateRotationY(System.Double)">
      <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
      <param name="angle">The counter-clockwise angle in radians.</param>
      <returns>The resulting Matrix4d instance.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateRotationZ(System.Double,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
      <param name="angle">The counter-clockwise angle in radians.</param>
      <param name="result">The resulting Matrix4d instance.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateRotationZ(System.Double)">
      <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
      <param name="angle">The counter-clockwise angle in radians.</param>
      <returns>The resulting Matrix4d instance.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateTranslation(System.Double,System.Double,System.Double,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Creates a translation matrix.
            </summary>
      <param name="x">X translation.</param>
      <param name="y">Y translation.</param>
      <param name="z">Z translation.</param>
      <param name="result">The resulting Matrix4d instance.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateTranslation(ObservatoryLib.Vector3d@,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Creates a translation matrix.
            </summary>
      <param name="vector">The translation vector.</param>
      <param name="result">The resulting Matrix4d instance.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateTranslation(System.Double,System.Double,System.Double)">
      <summary>
            Creates a translation matrix.
            </summary>
      <param name="x">X translation.</param>
      <param name="y">Y translation.</param>
      <param name="z">Z translation.</param>
      <returns>The resulting Matrix4d instance.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateTranslation(ObservatoryLib.Vector3d)">
      <summary>
            Creates a translation matrix.
            </summary>
      <param name="vector">The translation vector.</param>
      <returns>The resulting Matrix4d instance.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateOrthographic(System.Double,System.Double,System.Double,System.Double,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Creates an orthographic projection matrix.
            </summary>
      <param name="width">The width of the projection volume.</param>
      <param name="height">The height of the projection volume.</param>
      <param name="zNear">The near edge of the projection volume.</param>
      <param name="zFar">The far edge of the projection volume.</param>
      <param name="result">The resulting Matrix4d instance.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateOrthographic(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates an orthographic projection matrix.
            </summary>
      <param name="width">The width of the projection volume.</param>
      <param name="height">The height of the projection volume.</param>
      <param name="zNear">The near edge of the projection volume.</param>
      <param name="zFar">The far edge of the projection volume.</param>
      <rereturns>The resulting Matrix4d instance.</rereturns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Creates an orthographic projection matrix.
            </summary>
      <param name="left">The left edge of the projection volume.</param>
      <param name="right">The right edge of the projection volume.</param>
      <param name="bottom">The bottom edge of the projection volume.</param>
      <param name="top">The top edge of the projection volume.</param>
      <param name="zNear">The near edge of the projection volume.</param>
      <param name="zFar">The far edge of the projection volume.</param>
      <param name="result">The resulting Matrix4d instance.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates an orthographic projection matrix.
            </summary>
      <param name="left">The left edge of the projection volume.</param>
      <param name="right">The right edge of the projection volume.</param>
      <param name="bottom">The bottom edge of the projection volume.</param>
      <param name="top">The top edge of the projection volume.</param>
      <param name="zNear">The near edge of the projection volume.</param>
      <param name="zFar">The far edge of the projection volume.</param>
      <returns>The resulting Matrix4d instance.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Creates a perspective projection matrix.
            </summary>
      <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
      <param name="aspect">Aspect ratio of the view (width / height)</param>
      <param name="zNear">Distance to the near clip plane</param>
      <param name="zFar">Distance to the far clip plane</param>
      <param name="result">A projection matrix that transforms camera space to raster space</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet"><item>fovy is zero, less than zero or larger than Math.PI</item><item>aspect is negative or zero</item><item>zNear is negative or zero</item><item>zFar is negative or zero</item><item>zNear is larger than zFar</item></list></exception>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a perspective projection matrix.
            </summary>
      <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
      <param name="aspect">Aspect ratio of the view (width / height)</param>
      <param name="zNear">Distance to the near clip plane</param>
      <param name="zFar">Distance to the far clip plane</param>
      <returns>A projection matrix that transforms camera space to raster space</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet"><item>fovy is zero, less than zero or larger than Math.PI</item><item>aspect is negative or zero</item><item>zNear is negative or zero</item><item>zFar is negative or zero</item><item>zNear is larger than zFar</item></list></exception>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Creates an perspective projection matrix.
            </summary>
      <param name="left">Left edge of the view frustum</param>
      <param name="right">Right edge of the view frustum</param>
      <param name="bottom">Bottom edge of the view frustum</param>
      <param name="top">Top edge of the view frustum</param>
      <param name="zNear">Distance to the near clip plane</param>
      <param name="zFar">Distance to the far clip plane</param>
      <param name="result">A projection matrix that transforms camera space to raster space</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet"><item>zNear is negative or zero</item><item>zFar is negative or zero</item><item>zNear is larger than zFar</item></list></exception>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates an perspective projection matrix.
            </summary>
      <param name="left">Left edge of the view frustum</param>
      <param name="right">Right edge of the view frustum</param>
      <param name="bottom">Bottom edge of the view frustum</param>
      <param name="top">Top edge of the view frustum</param>
      <param name="zNear">Distance to the near clip plane</param>
      <param name="zFar">Distance to the far clip plane</param>
      <returns>A projection matrix that transforms camera space to raster space</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet"><item>zNear is negative or zero</item><item>zFar is negative or zero</item><item>zNear is larger than zFar</item></list></exception>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Translation(ObservatoryLib.Vector3d)">
      <summary>
            Build a translation matrix with the given translation
            </summary>
      <param name="trans">The vector to translate along</param>
      <returns>A Translation matrix</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Translation(System.Double,System.Double,System.Double)">
      <summary>
            Build a translation matrix with the given translation
            </summary>
      <param name="x">X translation</param>
      <param name="y">Y translation</param>
      <param name="z">Z translation</param>
      <returns>A Translation matrix</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Scale(System.Double)">
      <summary>
            Build a scaling matrix
            </summary>
      <param name="scale">Single scale factor for x,y and z axes</param>
      <returns>A scaling matrix</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Scale(ObservatoryLib.Vector3d)">
      <summary>
            Build a scaling matrix
            </summary>
      <param name="scale">Scale factors for x,y and z axes</param>
      <returns>A scaling matrix</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Scale(System.Double,System.Double,System.Double)">
      <summary>
            Build a scaling matrix
            </summary>
      <param name="x">Scale factor for x-axis</param>
      <param name="y">Scale factor for y-axis</param>
      <param name="z">Scale factor for z-axis</param>
      <returns>A scaling matrix</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.RotateX(System.Double)">
      <summary>
            Build a rotation matrix that rotates about the x-axis
            </summary>
      <param name="angle">angle in radians to rotate counter-clockwise around the x-axis</param>
      <returns>A rotation matrix</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.RotateY(System.Double)">
      <summary>
            Build a rotation matrix that rotates about the y-axis
            </summary>
      <param name="angle">angle in radians to rotate counter-clockwise around the y-axis</param>
      <returns>A rotation matrix</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.RotateZ(System.Double)">
      <summary>
            Build a rotation matrix that rotates about the z-axis
            </summary>
      <param name="angle">angle in radians to rotate counter-clockwise around the z-axis</param>
      <returns>A rotation matrix</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Rotate(ObservatoryLib.Vector3d,System.Double)">
      <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
      <param name="axis">the axis to rotate about</param>
      <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
      <returns>A rotation matrix</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.LookAt(ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d)">
      <summary>
            Build a world space to camera space matrix
            </summary>
      <param name="eye">Eye (camera) position in world space</param>
      <param name="target">Target position in world space</param>
      <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
      <returns>A Matrix that transforms world space to camera space</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.LookAt(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Build a world space to camera space matrix
            </summary>
      <param name="eyeX">Eye (camera) position in world space</param>
      <param name="eyeY">Eye (camera) position in world space</param>
      <param name="eyeZ">Eye (camera) position in world space</param>
      <param name="targetX">Target position in world space</param>
      <param name="targetY">Target position in world space</param>
      <param name="targetZ">Target position in world space</param>
      <param name="upX">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
      <param name="upY">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
      <param name="upZ">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
      <returns>A Matrix4 that transforms world space to camera space</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Frustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Build a projection matrix
            </summary>
      <param name="left">Left edge of the view frustum</param>
      <param name="right">Right edge of the view frustum</param>
      <param name="bottom">Bottom edge of the view frustum</param>
      <param name="top">Top edge of the view frustum</param>
      <param name="near">Distance to the near clip plane</param>
      <param name="far">Distance to the far clip plane</param>
      <returns>A projection matrix that transforms camera space to raster space</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Perspective(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Build a projection matrix
            </summary>
      <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
      <param name="aspect">Aspect ratio of the view (width / height)</param>
      <param name="near">Distance to the near clip plane</param>
      <param name="far">Distance to the far clip plane</param>
      <returns>A projection matrix that transforms camera space to raster space</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Add(ObservatoryLib.Matrix4dtk,ObservatoryLib.Matrix4dtk)">
      <summary>
            Adds two instances.
            </summary>
      <param name="left">The left operand of the addition.</param>
      <param name="right">The right operand of the addition.</param>
      <returns>A new instance that is the result of the addition.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Add(ObservatoryLib.Matrix4dtk@,ObservatoryLib.Matrix4dtk@,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Adds two instances.
            </summary>
      <param name="left">The left operand of the addition.</param>
      <param name="right">The right operand of the addition.</param>
      <param name="result">A new instance that is the result of the addition.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Subtract(ObservatoryLib.Matrix4dtk,ObservatoryLib.Matrix4dtk)">
      <summary>
            Subtracts one instance from another.
            </summary>
      <param name="left">The left operand of the subraction.</param>
      <param name="right">The right operand of the subraction.</param>
      <returns>A new instance that is the result of the subraction.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Subtract(ObservatoryLib.Matrix4dtk@,ObservatoryLib.Matrix4dtk@,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Subtracts one instance from another.
            </summary>
      <param name="left">The left operand of the subraction.</param>
      <param name="right">The right operand of the subraction.</param>
      <param name="result">A new instance that is the result of the subraction.</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Mult(ObservatoryLib.Matrix4dtk,ObservatoryLib.Matrix4dtk)">
      <summary>
            Multiplies two instances.
            </summary>
      <param name="left">The left operand of the multiplication.</param>
      <param name="right">The right operand of the multiplication.</param>
      <returns>A new instance that is the result of the multiplication</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Mult(ObservatoryLib.Matrix4dtk@,ObservatoryLib.Matrix4dtk@,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Multiplies two instances.
            </summary>
      <param name="left">The left operand of the multiplication.</param>
      <param name="right">The right operand of the multiplication.</param>
      <param name="result">A new instance that is the result of the multiplication</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Mult(ObservatoryLib.Matrix4dtk,System.Double)">
      <summary>
            Multiplies an instance by a scalar.
            </summary>
      <param name="left">The left operand of the multiplication.</param>
      <param name="right">The right operand of the multiplication.</param>
      <returns>A new instance that is the result of the multiplication</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Mult(ObservatoryLib.Matrix4dtk@,System.Double,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Multiplies an instance by a scalar.
            </summary>
      <param name="left">The left operand of the multiplication.</param>
      <param name="right">The right operand of the multiplication.</param>
      <param name="result">A new instance that is the result of the multiplication</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Invert(ObservatoryLib.Matrix4dtk)">
      <summary>
            Calculate the inverse of the given matrix
            </summary>
      <param name="mat">The matrix to invert</param>
      <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4d is singular.</exception>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Transpose(ObservatoryLib.Matrix4dtk)">
      <summary>
            Calculate the transpose of the given matrix
            </summary>
      <param name="mat">The matrix to transpose</param>
      <returns>The transpose of the given matrix</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Transpose(ObservatoryLib.Matrix4dtk@,ObservatoryLib.Matrix4dtk@)">
      <summary>
            Calculate the transpose of the given matrix
            </summary>
      <param name="mat">The matrix to transpose</param>
      <param name="result">The result of the calculation</param>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.op_Multiply(ObservatoryLib.Matrix4dtk,ObservatoryLib.Matrix4dtk)">
      <summary>
            Matrix multiplication
            </summary>
      <param name="left">left-hand operand</param>
      <param name="right">right-hand operand</param>
      <returns>A new Matrix4d which holds the result of the multiplication</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.op_Multiply(ObservatoryLib.Matrix4dtk,System.Single)">
      <summary>
            Matrix-scalar multiplication
            </summary>
      <param name="left">left-hand operand</param>
      <param name="right">right-hand operand</param>
      <returns>A new Matrix4d which holds the result of the multiplication</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.op_Addition(ObservatoryLib.Matrix4dtk,ObservatoryLib.Matrix4dtk)">
      <summary>
            Matrix addition
            </summary>
      <param name="left">left-hand operand</param>
      <param name="right">right-hand operand</param>
      <returns>A new Matrix4d which holds the result of the addition</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.op_Subtraction(ObservatoryLib.Matrix4dtk,ObservatoryLib.Matrix4dtk)">
      <summary>
            Matrix subtraction
            </summary>
      <param name="left">left-hand operand</param>
      <param name="right">right-hand operand</param>
      <returns>A new Matrix4d which holds the result of the subtraction</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.op_Equality(ObservatoryLib.Matrix4dtk,ObservatoryLib.Matrix4dtk)">
      <summary>
            Compares two instances for equality.
            </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True, if left equals right; false otherwise.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.op_Inequality(ObservatoryLib.Matrix4dtk,ObservatoryLib.Matrix4dtk)">
      <summary>
            Compares two instances for inequality.
            </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True, if left does not equal right; false otherwise.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.ToString">
      <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.GetHashCode">
      <summary>
            Returns the hashcode for this instance.
            </summary>
      <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">The object to compare to.</param>
      <returns>True if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:ObservatoryLib.Matrix4dtk.Equals(ObservatoryLib.Matrix4dtk)">
      <summary>Indicates whether the current matrix is equal to another matrix.</summary>
      <param name="other">A matrix to compare with this matrix.</param>
      <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.Determinant">
      <summary>
            The determinant of this matrix
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.Column0">
      <summary>
            The first column of this matrix
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.Column1">
      <summary>
            The second column of this matrix
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.Column2">
      <summary>
            The third column of this matrix
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.Column3">
      <summary>
            The fourth column of this matrix
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M11">
      <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M12">
      <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M13">
      <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M14">
      <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M21">
      <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M22">
      <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M23">
      <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M24">
      <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M31">
      <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M32">
      <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M33">
      <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M34">
      <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M41">
      <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M42">
      <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M43">
      <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.M44">
      <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.Diagonal">
      <summary>
            Gets or sets the values along the main diagonal of the matrix.
            </summary>
    </member>
    <member name="P:ObservatoryLib.Matrix4dtk.Trace">
      <summary>
            Gets the trace of the matrix, the sum of the values along the diagonal.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Vector4dtk.op_Addition(ObservatoryLib.Vector4dtk,ObservatoryLib.Vector4dtk)">
      <summary>
            Adds two instances.
            </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>The result of the calculation.</returns>
    </member>
    <member name="M:ObservatoryLib.Vector4dtk.op_Subtraction(ObservatoryLib.Vector4dtk,ObservatoryLib.Vector4dtk)">
      <summary>
            Subtracts two instances.
            </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>The result of the calculation.</returns>
    </member>
    <member name="M:ObservatoryLib.Vector4dtk.op_UnaryNegation(ObservatoryLib.Vector4dtk)">
      <summary>
            Negates an instance.
            </summary>
      <param name="vec">The instance.</param>
      <returns>The result of the calculation.</returns>
    </member>
    <member name="M:ObservatoryLib.Vector4dtk.op_Multiply(ObservatoryLib.Vector4dtk,System.Double)">
      <summary>
            Multiplies an instance by a scalar.
            </summary>
      <param name="vec">The instance.</param>
      <param name="scale">The scalar.</param>
      <returns>The result of the calculation.</returns>
    </member>
    <member name="M:ObservatoryLib.Vector4dtk.op_Multiply(System.Double,ObservatoryLib.Vector4dtk)">
      <summary>
            Multiplies an instance by a scalar.
            </summary>
      <param name="scale">The scalar.</param>
      <param name="vec">The instance.</param>
      <returns>The result of the calculation.</returns>
    </member>
    <member name="M:ObservatoryLib.Vector4dtk.op_Multiply(ObservatoryLib.Vector4dtk,ObservatoryLib.Vector4dtk)">
      <summary>
            Component-wise multiplication between the specified instance by a scale vector.
            </summary>
      <param name="scale">Left operand.</param>
      <param name="vec">Right operand.</param>
      <returns>Result of multiplication.</returns>
    </member>
    <member name="M:ObservatoryLib.Vector4dtk.op_Division(ObservatoryLib.Vector4dtk,System.Double)">
      <summary>
            Divides an instance by a scalar.
            </summary>
      <param name="vec">The instance.</param>
      <param name="scale">The scalar.</param>
      <returns>The result of the calculation.</returns>
    </member>
    <member name="M:ObservatoryLib.Vector4dtk.op_Equality(ObservatoryLib.Vector4dtk,ObservatoryLib.Vector4dtk)">
      <summary>
            Compares two instances for equality.
            </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True, if left equals right; false otherwise.</returns>
    </member>
    <member name="M:ObservatoryLib.Vector4dtk.op_Inequality(ObservatoryLib.Vector4dtk,ObservatoryLib.Vector4dtk)">
      <summary>
            Compares two instances for inequality.
            </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True, if left does not equa lright; false otherwise.</returns>
    </member>
    <member name="T:ObservatoryLib.IColor">
      <summary>
            Specifies a color in Data Coordinates.
            </summary>
    </member>
    <member name="T:ObservatoryLib.Point2`2">
      <summary>
            A point, with a physical location in Euclidean 2-space, and a color.
            </summary>
    </member>
    <member name="T:ObservatoryLib.Point3`3">
      <summary>
            A point, with a physical location in Euclidean 3-space, and a color.
            </summary>
    </member>
    <member name="T:ObservatoryLib.PickId">
      <summary>
            A very small class, defined by an int ID which is globally unique.
            A one-to-one mapping from ID to System.Drawing.Color is used to 
            uniquely identify a given object during click-pick rendering. All 
            rendered objects have a Pick Index. Multiple objects can share the same 
            Pick Index. This class guarantees that each Pick Index maps to only one
            user-specified Guid, called a Pick Name. As "names" are used and un-unsed,
            the int Indices are recycled using an IdGenerator, to prevent 
            integer overflow. Overflow is still possible, of course, if the sheer
            number of uniquely identifiable items is too large. An exception is 
            thrown if the limit is reached.
            </summary>
    </member>
    <member name="F:ObservatoryLib.PickIdMapping.IndexNameMap">
      <summary>
            The authoritative mapping between Pick Index and Pick Name
            </summary>
    </member>
    <member name="F:ObservatoryLib.PickIdMapping._Generator">
      <summary>
            Generates sequential Click Ids on-demand and supports re-use of
            unused Ids
            </summary>
    </member>
    <member name="M:ObservatoryLib.PickIdMapping.GetOrCreateIndex(System.Nullable{System.Guid})">
      <summary>
            Obtain the Click Id that maps 1-to-1 with this name. If the 
            mapping has not yet been determined, a new Click Id will be
            generated.
            </summary>
      <param name="nameNull">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.PickIdMapping.TryGetName(System.Int32)">
      <summary>
            Attempts to get the Pick Name for the specified Pick Index. Note
            however that the mapping may not exist yet, and if so, an 
            exception will be thrown. All Pick Indices are generated on-demand
            from a specified Pick Name. If the Index was validly obtained, there 
            *should* be a corresponding Name, created at a previous time.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.PickIdMapping.UnUse(System.Guid)">
      <summary>
            Signify that the specified Click Name is no longer in use, such
            that its Click Id can be re-used and associated to another 
            Click Name if requested in the future. It is harmless to call 
            this method with the special Click Names.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="F:ObservatoryLib.PickIdTreeMapping`1._PickNameToSyncable">
      <summary>
            Identifies the syncable that directly owns the keyed pick Id.
            </summary>
    </member>
    <member name="T:ObservatoryLib.PickNameSequence">
      <summary>
            Facilitates the creation and re-use of Pick Names. Enables on-demand
            creation automatically, as well as manual specification of a Name 
            that should be used.
            </summary>
    </member>
    <member name="M:ObservatoryLib.PickNameSequence.AddManual(System.Guid)">
      <summary>
            Indicate that the sequence shall contain the Name you are
            manually specifying.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:ObservatoryLib.PickNameSequence.RemoveManual(System.Guid)">
      <summary>
            Indicate that the sequence shall no longer contain the Name
            you are manually specifying.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:ObservatoryLib.PickNameSequence.Auto(System.Int32)">
      <summary>
            Automatically generates or re-uses a Guid based on an integer 
            index. The mapping from index to Name never changes, and is
            determined on-demand.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.PickNameSequence.RemoveAuto(System.Int32)">
      <summary>
            Indicate that the automatically generated Name for the specified
            index is no longer in use and be reappropriated.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:ObservatoryLib.PickNameSequence.Contains(System.Guid)">
      <summary>
            Determines whether or not the sequence contains the specified Name.
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.PointElement">
      <summary>
            A very simple class to specify the element in a set of
            vertices that defines a point primitive to be rendered.
            </summary>
    </member>
    <member name="T:ObservatoryLib.LineElements">
      <summary>
            A very simple class to specify the elements in a set of
            vertices that define a line primitive to be rendered.
            </summary>
    </member>
    <member name="T:ObservatoryLib.TriElements">
      <summary>
            A very simple class to specify the elements in a set of
            vertices that define a triangle primitive to be rendered.
            </summary>
    </member>
    <member name="T:ObservatoryLib.GlTexColor">
      <summary>
            The specification for the color of a scalar-value to be represented 
            in a texture image.
            </summary>
    </member>
    <member name="F:ObservatoryLib.GlTexColor.R">
      <summary>
            R,G,B,A values.
            R has certain special values:
                0.1 - PosInf,
                0.2 - NegInf,
                0.3 - NaN,
                0.4 - The value is negative.
                Anything else - the value is positive.
            G and B are always in the range [0,1]. The [unsigned] value of 
                this color is to be interpreted as G/B.
            </summary>
    </member>
    <member name="F:ObservatoryLib.GlTexColor.G">
      <summary>
            R,G,B,A values.
            R has certain special values:
                0.1 - PosInf,
                0.2 - NegInf,
                0.3 - NaN,
                0.4 - The value is negative.
                Anything else - the value is positive.
            G and B are always in the range [0,1]. The [unsigned] value of 
                this color is to be interpreted as G/B.
            </summary>
    </member>
    <member name="F:ObservatoryLib.GlTexColor.B">
      <summary>
            R,G,B,A values.
            R has certain special values:
                0.1 - PosInf,
                0.2 - NegInf,
                0.3 - NaN,
                0.4 - The value is negative.
                Anything else - the value is positive.
            G and B are always in the range [0,1]. The [unsigned] value of 
                this color is to be interpreted as G/B.
            </summary>
    </member>
    <member name="F:ObservatoryLib.GlTexColor.A">
      <summary>
            R,G,B,A values.
            R has certain special values:
                0.1 - PosInf,
                0.2 - NegInf,
                0.3 - NaN,
                0.4 - The value is negative.
                Anything else - the value is positive.
            G and B are always in the range [0,1]. The [unsigned] value of 
                this color is to be interpreted as G/B.
            </summary>
    </member>
    <member name="M:ObservatoryLib.GlTexColor.Serialize(System.Double[])">
      <summary>
            Serializes values specified in GL coordinates into a float array
            to be buffered and interpreted by shaders.
            </summary>
      <param name="values">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.GLColor">
      <summary>
            The specification for the color of a vertex in GL coordinates. The
            conversion from Gl coordinates to the *actual* final color is done
            in shaders and depends on uniform variables not seen here.
            </summary>
    </member>
    <member name="F:ObservatoryLib.GLColor.R">
      <summary>
            R, G, B, A values. 
            If R is NaN: 
                This is a numeric value.
                Further, G now means:
                    1 =&gt; PosInf,
                    2 =&gt; NegInf,
                    3 =&gt; NaN,
                    otherwise =&gt; further, B now means:
                        The actual numerical value
            Otherwise:
                R, G, B values are literal, ranging from 0 (dark) to 1 (bright)
                A (Alpha) value ranges from 0 = transparent to 1 = opaque
            </summary>
    </member>
    <member name="F:ObservatoryLib.GLColor.G">
      <summary>
            R, G, B, A values. 
            If R is NaN: 
                This is a numeric value.
                Further, G now means:
                    1 =&gt; PosInf,
                    2 =&gt; NegInf,
                    3 =&gt; NaN,
                    otherwise =&gt; further, B now means:
                        The actual numerical value
            Otherwise:
                R, G, B values are literal, ranging from 0 (dark) to 1 (bright)
                A (Alpha) value ranges from 0 = transparent to 1 = opaque
            </summary>
    </member>
    <member name="F:ObservatoryLib.GLColor.B">
      <summary>
            R, G, B, A values. 
            If R is NaN: 
                This is a numeric value.
                Further, G now means:
                    1 =&gt; PosInf,
                    2 =&gt; NegInf,
                    3 =&gt; NaN,
                    otherwise =&gt; further, B now means:
                        The actual numerical value
            Otherwise:
                R, G, B values are literal, ranging from 0 (dark) to 1 (bright)
                A (Alpha) value ranges from 0 = transparent to 1 = opaque
            </summary>
    </member>
    <member name="F:ObservatoryLib.GLColor.A">
      <summary>
            R, G, B, A values. 
            If R is NaN: 
                This is a numeric value.
                Further, G now means:
                    1 =&gt; PosInf,
                    2 =&gt; NegInf,
                    3 =&gt; NaN,
                    otherwise =&gt; further, B now means:
                        The actual numerical value
            Otherwise:
                R, G, B values are literal, ranging from 0 (dark) to 1 (bright)
                A (Alpha) value ranges from 0 = transparent to 1 = opaque
            </summary>
    </member>
    <member name="M:ObservatoryLib.GLColor.Serialize(System.Double,System.Single[]@,System.Int32)">
      <summary>
            Returns the length-4 float array to be buffered for a given value, 
            specified in GL coordinates.
            </summary>
      <param name="value">The numeric value in GL coordinates.</param>
      <param name="target">The array to put the result into.</param>
      <param name="ordinalIndex">The index of the element in its 
            source array. The index its serialized values will start at 
            will be 4*this value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.GLColor.Serialize(System.Double[])">
      <summary>
            Serializes values specified in GL coordinates into a float array
            to be buffered and interpreted by shaders.
            </summary>
      <param name="values">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:ObservatoryLib.Renderer._OpenGLLock">
      <summary>
            A global lock used to synchronize multiple visualizations issuing
            commands to the OpenGL state machine.
            </summary>
    </member>
    <member name="M:ObservatoryLib.Renderer.BindAndBufferFloatImage(ObservatoryLib.ObsTexture,System.Single[],System.Int32)">
      <summary>
            Buffers data that represents a numeric-valued image. Values in
            the float array must have already been convered to GL coords
            AND must have been serialized such that they represent the
            R, G, B, A values that will be interpreted by the shader.
            </summary>
    </member>
    <member name="T:ObservatoryLib.IVaoCacheGroup">
      <summary>
            A group of serialized VAO caches, which enable clearing, rendering, and 
            querying-for items by ID and owner ID.
            </summary>
    </member>
    <member name="T:ObservatoryLib.IVaoCacheGroup`1">
      <summary>
            A group of serialized VAO caches, which enable adding, updating, clearing, 
            rendering, and querying-for items by ID and owner ID.
            </summary>
    </member>
    <member name="T:ObservatoryLib.IrregularSingleBuffer.Slot">
      <summary>
            Describes a finite, continuous block within an array.
            </summary>
    </member>
    <member name="F:ObservatoryLib.IrregularSingleBuffer._Buffer">
      <summary>
            The actual buffer contining all the serialized data in its final form:
            </summary>
    </member>
    <member name="F:ObservatoryLib.IrregularSingleBuffer._ReserveStart">
      <summary>
            The index in the buffer where the "reserve" portion begins. The "reserve"
            portion occupies the last ~10% or so of the buffer. Reserve gets used up
            like telomeres, and in this sense, irregular buffer re-use is art
            mimicking life.
            </summary>
    </member>
    <member name="F:ObservatoryLib.IrregularSingleBuffer._Items">
      <summary>
            A mapping from each item in the buffer to the slot that it occupies. Does
            not represent pending items.
            </summary>
    </member>
    <member name="F:ObservatoryLib.IrregularSingleBuffer._Free">
      <summary>
            Indicates all the slots which have been vacated and are available for
            re-use by another item. Key represents the size of the slot, and the 
            values represents all slots avaialable for re-use of a given size.
            </summary>
    </member>
    <member name="F:ObservatoryLib.IrregularSingleBuffer._PendingRemovals">
      <summary>
            Items which will be removed the next time this is serialized. Note: this
            may include duplicates; nothing bad will happen.
            </summary>
    </member>
    <member name="F:ObservatoryLib.IrregularSingleBuffer._PendingAdditions">
      <summary>
            Items that will be added the next time this is serialized. All items must 
            have an identifier (Guid) in addition to their payload.
            </summary>
    </member>
    <member name="T:ObservatoryLib.IReusableBuffer">
      <summary>
            An object that maintains a set of key-value pairs (Guid to float array)
            and will return a complete serialized array on command. Serialization
            is not guaranteed in any particular order, but it is always the same
            when the other methods are called in the same order. You can query to
            find the ordinal position of a specified object in the array, however.
            </summary>
    </member>
    <member name="T:ObservatoryLib.RegularReusableBuffer">
      <summary>
            Maintains a set of key-value pairs (Guid to float array)
            and can serialize them into a single buffer on command. Requires that
            all input float array values are of the same length. Uses this 
            constraint to minimize the amount of shuffling and re-allocating
            necessary. Ordering in the buffer is determined by the order of the 
            calls to the public methods, and independent of anything else. This
            property enables multiple to be used in a set in a context that is
            sensitive to the relative sequencing of the sets, but not the absolute
            sequencing.
            </summary>
    </member>
    <member name="F:ObservatoryLib.RegularReusableBuffer._IdGenerator">
      <summary>
            Determines the order in which items will appear in the array 
            buffers. It will re-use space when items are no longer in use.
            </summary>
    </member>
    <member name="F:ObservatoryLib.RegularReusableBuffer._Indices">
      <summary>
            A mapping of which item was placed in which ordinal position 
            within the buffers. Needed in order to render a subset of the 
            available items.
            </summary>
    </member>
    <member name="F:ObservatoryLib.RegularReusableBuffer._Items">
      <summary>
            A mapping from Id to the item with that Id.
            </summary>
    </member>
    <member name="F:ObservatoryLib.RegularReusableBuffer._BuffersNeedSerialization">
      <summary>
            Whether or not the buffers need to be serialized based on a change 
            to their source content.
            </summary>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBuffer.#ctor(System.Int32)">
      <summary>
            Construct for a set of items to be added which must all have 
            float arrays of the length specified.
            </summary>
      <param name="stride">
      </param>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBuffer.AddOrUpdateItem(System.Guid,System.Single[])">
      <summary>
            Add an item to the buffer. If the item exists already, it will
            be replaced. If not, it will be added. Calling this method is
            always fast and does not involve array copying or shuffling.
            </summary>
      <param name="id">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBuffer.ReleaseItem(System.Guid)">
      <summary>
            Removes the item from the set so that the space can be re-used.
            If you intend to re-add the same item again, you should 
            call SetIsVisible instead TODO! DOES NOT EXIST YET
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBuffer.Clear">
      <summary>
            Clears the buffer of all items and frees all space.
            </summary>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBuffer.GetIndexOfItem(System.Guid)">
      <summary>
            Gets the ordinal position of an item within the array. It's indices
            in the buffer will begin at Stride times this number.
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBuffer.SerializeBuffers(System.Single[]@,System.Int32@)">
      <summary>
            Returns the complete serialized buffer. This method may require 
            copying or re-allocating of CPU space, which could be slow.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.RegularReusableBufferSet">
      <summary>
            A set of re-useable buffers. Produces each buffer in its complete
            serialized form upon command. The relative ordering of the buffers is
            always the same, and the ordinal position of any item can be queried.
            </summary>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBufferSet.#ctor(System.Int32[])">
      <summary>
            Construct a set of re-usable buffers, each of which is intended to
            hold items of a uniform length. The length of the item may vary
            from buffer to buffer however. Specify the intended length for
            each buffer.
            </summary>
      <param name="bufferStrides">
      </param>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBufferSet.AddOrUpdateItem(System.Guid,System.Boolean[],System.Single[][])">
      <summary>
            Add an item, with the corresponding payload to each of the buffers.
            The payloads must be of the uniform lengths specified at 
            construction time.
            </summary>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBufferSet.ReleaseItem(System.Guid)">
      <summary>
            Remove the item from the set, and allow the space it occupied to
            be re-used.
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBufferSet.Clear">
      <summary>
            Clear all items from the set, freeing up all space that was being
            used.
            </summary>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBufferSet.GetIndexOfItem(System.Guid)">
      <summary>
            Query the *ordinal* position of the item within the set. Throws an
            exception if the item is not present. Array indices that store the
            item's payload will depend on the size per item, which is not
            reflected in the result of this method.
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.RegularReusableBufferSet.SerializeBuffers(System.Nullable{System.Int32}@)">
      <summary>
            Returns the complete serialized array for each of the buffers
            being maintained. This call may involve array copied in CPU memory
            and so may be relatively slow compared to Add/Update/Remove.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.IVaoSerializer">
      <summary>
            Any object that serializes content for rendering as a Vertex Attribute Object.
            </summary>
    </member>
    <member name="P:ObservatoryLib.IVaoSerializer.Id">
      <summary>
            A unique identifier for this item so that it can be added to or
            removed from a shared buffer.
            </summary>
    </member>
    <member name="T:ObservatoryLib.IrregularItemSerializer">
      <summary>
            Serializes a single item whose vertex attribute arrays may not be a regular, 
            fixed length. They may be added to or removed from. 
            </summary>
    </member>
    <member name="M:ObservatoryLib.IrregularItemSerializer.UpdateColors(System.Guid,ObservatoryLib.GLColor[])">
      <summary>
            Assumes color is 4 floats per vertex and resides in the buffer at index 1.
            </summary>
      <param name="name">
      </param>
      <param name="colors">
      </param>
    </member>
    <member name="T:ObservatoryLib.IrregularScreenPrimBuilder">
      <summary>
            A class which supports familiar means for specifying primitives 
            in the screen plane, and will produce the needed item serializers as desired.
            </summary>
    </member>
    <member name="T:ObservatoryLib.RegularVaoSerializerBase">
      <summary>
            Base class for serializing a regular item into Vertex Attribute Object arrays.
            </summary>
    </member>
    <member name="T:ObservatoryLib.CharSerializer">
      <summary>
            Serializes the source information for a single character to be 
            rendered to the screen plane.
            </summary>
    </member>
    <member name="T:ObservatoryLib.SharedItemSerializer`1">
      <summary>
            Maintains array and element buffers and GPU memory locations for a set
            of render items, all having the same number of vertices and the same
            elemental pattern. Supports re-use of CPU buffers and minimizes 
            re-serialization of items whose source data has not changed.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:ObservatoryLib.SharedItemSerializer`1._OutOfDate">
      <summary>
            Whether the OpenGL buffers no longer contain the most up-to-date
            data.
            </summary>
    </member>
    <member name="T:ObservatoryLib.SerializedVaoCache`1">
      <summary>
            Keeps track of the serialized arrays that mirror what are held by the GPU and
            that correspond to a single VaoSerializer. Keeps track of whether or not arrays
            need to be re-sent based on updates.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:ObservatoryLib.SerializedVaoCache`1._OutOfDate">
      <summary>
            Whether the OpenGL buffers no longer contain the most up-to-date
            data.
            </summary>
    </member>
    <member name="T:ObservatoryLib.SerializedVaoCacheGroup`1">
      <summary>
            A group of serialized VAO caches, keyed by an owner ID (Guid). Enables
            add/update/clear/render functionality on a per-item and per-owner basis.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:ObservatoryLib.ShaderProgram">
      <summary>
            Information about a shader program that was compiled at run-time and
            is available for use in a given GraphicsContext.
            </summary>
    </member>
    <member name="F:ObservatoryLib.ShaderProgram.ProgramId">
      <summary>
            The GPU's ID for the program
            </summary>
    </member>
    <member name="F:ObservatoryLib.ShaderProgram.UniformLocations">
      <summary>
            The GPUs locations of all uniform variables. These are chosen by
            the GPU, so we do not know what they are from the 
            ShaderSource alone.
            </summary>
    </member>
    <member name="T:ObservatoryLib.PrimitiveShaderProgram">
      <summary>
            Information about a Primitive Shader that was compiled at run-time.
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveShaderProgram.ModelViewLocation">
      <summary>
            The GPU's location for the uniform variable corresponding to the 
            model view matrix.
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveShaderProgram.ProjMatrixLocation">
      <summary>
            The GPU's location for the uniform variable corresponding to the 
            projection matrix.
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveShaderProgram.ClickPickLocation">
      <summary>
            The GPU's location for the uniform variable corresponding to the
            click pick global variable. 1 means Click Pick. 0 means normal.
            </summary>
    </member>
    <member name="P:ObservatoryLib.ValueImageShaderProgram.ModelViewLocation">
      <summary>
            The GPU's location for the uniform variable corresponding to the 
            model view matrix.
            </summary>
    </member>
    <member name="P:ObservatoryLib.ValueImageShaderProgram.ProjMatrixLocation">
      <summary>
            The GPU's location for the uniform variable corresponding to the 
            projection matrix.
            </summary>
    </member>
    <member name="T:ObservatoryLib.CharShaderProgram">
      <summary>
            Information about a Character Shader that was compiled at run-time.
            It is used to render text in the screen plane.
            </summary>
    </member>
    <member name="P:ObservatoryLib.CharShaderProgram.ViewportSizeLocation">
      <summary>
            The GPU's location for the uniform variable corresponding to the 
            viewport size.
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimScreenShaderProgram.ViewportLocation">
      <summary>
            The GPU's location for the uniform variable corresponding to the 
            viewport size.
            </summary>
    </member>
    <member name="T:ObservatoryLib.ShaderProgramSet">
      <summary>
            A container for the program information for a complete set of shaders
            used in conjunction with a single GLControl and GraphicsContext.
            </summary>
    </member>
    <member name="T:ObservatoryLib.ShaderSource">
      <summary>
            The source information that is used to compile a shader program
            at run-time.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ShaderSource.InputVariables">
      <summary>
            The input variables to the vertex shader. Keys are variable
            names, values are the type, e.g. "vec3"
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ShaderSource.UniformVertexVars">
      <summary>
            The uniform variables that are input to the vertex shader.
            Keys are variable names, values are the type, e.g. "mat4"
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ShaderSource.UniformFragmentVars">
      <summary>
            The uniform variables that are input to the fragment shader.
            Keys are variable names, values are the type, e.g. "mat4"
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ShaderSource.UniformNames">
      <summary>
            All uniform variable names for this shader program
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ShaderSource.VertexSource">
      <summary>
            The complete string literal source code for the vertex shader.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ShaderSource.FragmentSource">
      <summary>
            The complete string literal source code for the fragment shader.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ShaderSource.VertexBody">
      <summary>
            The string literal body of the vertex shader. Do not include
            input variable declarations. Do not include uniform variable
            declarations. DO declare out variables.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ShaderSource.FragmentBody">
      <summary>
            The string literal body of the fragment shader. Do not include
            uniform variable declarations. DO include input variables from
            the vertex shader. DO declare out variables.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.CharShaderSource">
      <summary>
            Source information to compile the "character" shader, which renders
            text by referencing a single uniform sampler which contains transforms
            of all characters concatenated and pre-computed in a special format.
            </summary>
    </member>
    <member name="F:ObservatoryLib.CharShaderSource.ViewportSize">
      <summary>
            Name of the uniform variable that stores the size in pixels, of 
            the viewport (vec2).
            </summary>
    </member>
    <member name="F:ObservatoryLib.CharShaderSource.Time">
      <summary>
            Drunk time variable in GLSL.
            </summary>
    </member>
    <member name="F:ObservatoryLib.CharShaderSource.SamplerName">
      <summary>
            Name of the uniform sampler variable. No need to bind to it, since
            there is only one sampler it know to bind to the right one 
            magically (I don't like it either).
            </summary>
    </member>
    <member name="F:ObservatoryLib.CharShaderSource.ClickPickName">
      <summary>
            Represents whether we are in click pick mode or not.
            </summary>
    </member>
    <member name="M:ObservatoryLib.CharShaderSource.VertexBody">
      <summary>
            The camera is at the origin, facing the -Z direction. Field of view
            magnitude is equal to 1 in each axis. Centered on (0,0) with lowest 
            values corresponding to the LOWER left. This is in the OpenGL spec.
            This shader normalizes and shifts according to the viewport size.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.CharShaderSource.FragmentBody">
      <summary>
            Uses a "distance field" technique to render characters at any size.
            See the SIGGRAPH 2007 paper by Chris Green.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:ObservatoryLib.CharShaderSource.VertexPositionAttribute">
      <summary>
            Vertex attribute location for the positional information, which is
            to be specified in pixels on the screen, with (0,0) being in the
            upper left. Bind a buffer with values are X, Y, X, Y, X, Y, etc.
            </summary>
    </member>
    <member name="P:ObservatoryLib.CharShaderSource.TextureCoordAttribute">
      <summary>
            Vertex attribute location for the texture coordinates, specified
            from (0,0) =&gt; (1,1), in order X, Y, X, Y. Each character will have
            a different corresponding texture coordinate range.
            </summary>
    </member>
    <member name="P:ObservatoryLib.CharShaderSource.TexPerPixelCoordAttribute">
      <summary>
            Vertex attribute location to store a factor used for smoothing the
            characters. Value should be specified as the amount of change in
            texture coordinate that corresponds to a change of one pixel on 
            the screen *for the size that this character is to be rendered at*
            which this shader does not know (it sees only one vertex at a 
            time).
            </summary>
    </member>
    <member name="T:ObservatoryLib.ImageScreenShaderSource">
      <summary>
            Source information to compile the shader that renders images whose
            vertices are specified in screen pixel coordinates. Colors in the
            bound texture are assumed to be literal.
            </summary>
    </member>
    <member name="T:ObservatoryLib.ImageShaderSource">
      <summary>
            Source information to compile the shader that renders images whose
            vertices are specified in 3-dminesional GL coordinates. Colors in the
            bound texture are assumed to be literal.
            </summary>
    </member>
    <member name="P:ObservatoryLib.ImageShaderSource.VertexClickIdAttribute">
      <summary>
            Vertex attribute location of clickId color of each vertex. Colors
            range from 0 to 1, in order R, G, B. No alpha.
            </summary>
    </member>
    <member name="T:ObservatoryLib.PrimitiveScreenShaderSource">
      <summary>
            Source information used to compile the primitive screen shader, which 
            renders points and triangles specified in 2-dimensional screen
            pixel coordinates. Colors may either be literal or specially-encoded
            numeric values.
            </summary>
    </member>
    <member name="M:ObservatoryLib.PrimitiveScreenShaderSource.UniformFragmentVars">
      <summary>
            The uniform variables input to the fragment shader. Returns an 
            empty dictionary, because there are no uniform inputs to the
            fragment shader.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.PrimitiveScreenShaderSource.VertexBody">
      <summary>
            The camera is at the origin, facing the -Z direction. Field of view
            magnitude is equal to 1 in each axis. Centered on (0,0) with lowest 
            values corresponding to the LOWER left. This is in the OpenGL spec.
            This shader normalizes and shifts according to the viewport size.
            Simple pass-through of color to fragment shader.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.PrimitiveScreenShaderSource.FragmentBody">
      <summary>
            Simply set the color to the value passed in.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:ObservatoryLib.PrimitiveScreenShaderSource.VertexPositionAttribute">
      <summary>
            Vertex attribute location for positional data in screen pixels.
            Expected values in the buffer respresent X, Y, X, Y, ...
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveScreenShaderSource.VertexColorAttribute">
      <summary>
            Vertex attribute location for color of each vertex. Expected
            range are from 0 to 1, in order R, G, B, A, R, G, B, A, ...
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveScreenShaderSource.PointSizeAttribute">
      <summary>
            Vertex attribute location for the size of each point. If the 
            primitive type is not "Point", this has no effect.
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveScreenShaderSource.VertexClickIdAttribute">
      <summary>
            Vertex attribute location of clickId color of each vertex. Colors
            range from 0 to 1, in order R, G, B. No alpha.
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveScreenShaderSource.VisibilityAttribute">
      <summary>
            Vertex attribute location for values indicating whether or not the
            vertex is visible. 1 = visible; 0 = invisible. OpenGL cannot 
            handle bools as vertex attribute arrays.
            </summary>
    </member>
    <member name="T:ObservatoryLib.PrimitiveShaderSource">
      <summary>
            Source information used to compile the primitive shader, which renders
            points, lines, and triangles specified in the 3-dimensional GL 
            coordinate system. Colors may either be literal or specially-encoded
            numeric values.
            </summary>
    </member>
    <member name="M:ObservatoryLib.PrimitiveShaderSource.UniformFragmentVars">
      <summary>
            The uniform variables input to the fragment shader. Returns an 
            empty dictionary, because there are no uniform inputs to the
            fragment shader.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.PrimitiveShaderSource.VertexBody">
      <summary>
            Transform each vertex position by the model-view and 
            projection matrices, which are uniform. Set point size directly
            from input variable. Pass color unmodified to the fragment shader.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:ObservatoryLib.PrimitiveShaderSource.VertexPositionAttribute">
      <summary>
            Vertex attribute location for positional data in "GL" coordinates.
            Expected values in the buffer respresent X, Y, Z
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveShaderSource.VertexColorAttribute">
      <summary>
            Vertex attribute location for color of each vertex. Expected
            range are from 0 to 1, in order R, G, B, A, R, G, B, A, ...
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveShaderSource.VertexClickIdAttribute">
      <summary>
            Vertex attribute location of clickId color of each vertex. Colors
            range from 0 to 1, in order R, G, B. No alpha.
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveShaderSource.PointSizeAttribute">
      <summary>
            Vertex attribute location for the size of each point. If the 
            primitive type is not "Point", this has no effect.
            </summary>
    </member>
    <member name="P:ObservatoryLib.PrimitiveShaderSource.VisibilityAttribute">
      <summary>
            Vertex attribute location for values indicating whether or not the
            vertex is visible. 1 = visible; 0 = invisible. OpenGL cannot 
            handle bools as vertex attribute arrays.
            </summary>
    </member>
    <member name="T:ObservatoryLib.SymbolShaderSource">
      <summary>
            UNUSED AND UNTESTED. Enables custom images to be drawn at each point.
            </summary>
    </member>
    <member name="T:ObservatoryLib.ValueImageShaderSource">
      <summary>
            Source information used to compile a shader that renders images whose
            pixel values are specially encoded to represent a floating point,
            numeric value. Values are converted to colors based on the present
            color conversion and color map, which are bound as uniform variables.
            </summary>
    </member>
    <member name="T:ObservatoryLib.BitmapTexture">
      <summary>
            Represents a texture object in OpenGL. Manages deconstruction: if no
            references remain, the texture buffer will be deleted. Allows multiple
            usage, even within one frame, of a texture buffer.
            </summary>
    </member>
    <member name="P:ObservatoryLib.BitmapTexture.Image">
      <summary>
            The source image, which is sent to OpenGL at construction time.
            </summary>
    </member>
    <member name="T:ObservatoryLib.FloatTexture">
      <summary>
            Represents an image whose pixels represent numerical values, converted
            to GL coordinates, and transformed into colors that will be interpreted
            by the shader as values to be interpolated along the color map.
            </summary>
    </member>
    <member name="P:ObservatoryLib.TrendSettings.TickCapLength">
      <summary>
            Determines the width of the perpendicular "caps" on top and bottom
            of the error bars. Specified as a fraction from 0 to 1 of the whole cube.
            </summary>
    </member>
    <member name="P:ObservatoryLib.TrendSettings.LineWidth">
      <summary>
            Determines the width of all trend lines, in pixels.
            </summary>
    </member>
    <member name="P:ObservatoryLib.TrendSettings.Color">
      <summary>
            Determines the color of the moving average overlay.
            </summary>
    </member>
    <member name="M:ObservatoryLib.DynamicSingleAxis`3.CalculateLabelShift(System.String,System.Double,ObservatoryLib.Vector2d,System.Boolean)">
      <summary>
            Finds the amount by which the 
            middle of the label needs to be shifted.
            </summary>
      <param name="label">Contents of the label</param>
      <param name="fontSize">Size of font to be rendered.</param>
      <param name="perp">A vector pointing in the OK direction to 
            move if the label overlaps the axis.</param>
      <param name="isVertical">Whether the label is oriented vertically.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.DynamicSingleAxis3`3.FindCubeEdgeBasedOnViewingAngle(ObservatoryLib.D3,ObservatoryLib.CameraState,ObservatoryLib.RectangularSolid)">
      <summary>
            Determines which edge of the Subject Volume to draw a given
            Coordinate's axis on.
            </summary>
      <param name="axis">
      </param>
      <param name="camera">
      </param>
      <param name="corners">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.DrawAxes">
      <summary>
            Whether to draw the axis line itself. Note that this does not affect the 
            tick lines, nor does it affect any labels.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.AxisLabel">
      <summary>
            A label to annotate this axis.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.AxisLabelFontSize">
      <summary>
            Approximate height in pixels for the axis label. If the value is null,
            an appropriate size is automatically chosen according to the size of the
            allocated pixel area for this plot.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.AxisLabelColor">
      <summary>
            The foreground color of the axis label.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.DrawTicks">
      <summary>
            Whether or not tick marks should be drawn along the axis. Note that this
            does not affect the tick labels.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.TickLength">
      <summary>
            The length of each tick line, represented as a fraction (0 to 1) of the 
            distance across the pixel area allocated to this plot. If null, an 
            appropriate size is automatically chosen according to the size and 
            aspect ratio of the pixel area allocated to this plot.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.TickColor">
      <summary>
            The foreground color for all the ticks. Note that this does not affect any
            of the labels, nor does it affect the axis line itself.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.TickLabelFontSize">
      <summary>
            Approximate height in pixels for all of the tick label on this axis. 
            If the value is null, an appropriate size is automatically chosen according 
            to the size of the allocated pixel area for this plot.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.TickLabelColor">
      <summary>
            The foreground color of the labels used to annotate the tick marks.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.ShowHideAxisLabel">
      <summary>
            Whether to show the axis label at all.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.ShowHideTickLabels">
      <summary>
            Whether to show labels for each of the tick marks at all.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.TargetTickCount">
      <summary>
            The approximate number of tick marks that will demarcate this axis. The
            exact number may vary with zoom and translation since round numbers are
            preferrentially chosen. Default value is 7.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SingleAxisSettings.DisableMouseOverRegion">
      <summary>
            If true, the highlights that normally appear when the mouse moves over the
            axis (for interactive control) will be disabled, and never shown.
            </summary>
    </member>
    <member name="M:ObservatoryLib.SinglePhysicalAxisSettings.HideAll">
      <summary>
            Hides all lines and labels that would normally 
            be drawn to represent this axis.
            </summary>
    </member>
    <member name="M:ObservatoryLib.SinglePhysicalAxisSettings.ShowAll">
      <summary>
            Shows all lines and labels that are normally drawn to represent this axis.
            </summary>
    </member>
    <member name="M:ObservatoryLib.SinglePhysicalAxisSettings.#ctor">
      <summary>
            Uses default values for everything.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SinglePhysicalAxisSettings.AxisColor">
      <summary>
            The color of the axis line itself. Note that this does not affect the tick
            mark lines, nor does it affect any labels.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SinglePhysicalAxisSettings.MouseOverLength">
      <summary>
            The size of the highlight region that appears when the mouse moves over the
            axis, respresented as a fraction of the distance across the pixel area
            allocated for this plot. If null, an appropriate size is automatically 
            chosen according to the size and aspect ratio of the pixel area allocated 
            to this plot.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SinglePhysicalAxisSettings.MouseOverColor">
      <summary>
            The color of the highlight region that appears when the mouse 
            is over this axis.
            </summary>
    </member>
    <member name="P:ObservatoryLib.SinglePhysicalAxisSettings.MouseDragColor">
      <summary>
            The color of the highlight region that appears when the user is 
            dragging after having clicked on this axis.
            </summary>
    </member>
    <member name="T:ObservatoryLib.TimeDrawing2">
      <summary>
            Enables the creation of drawings with points, lines, and polygons in 2D space
            defined by Time on the X-axis and Real values on the Y-axis.
            </summary>
    </member>
    <member name="T:ObservatoryLib.Drawing3">
      <summary>
            Enables the creation of drawings with points, lines, and polygons in 2D 
            real-valued space.
            </summary>
    </member>
    <member name="T:ObservatoryLib.CameraFacingImage`2">
      <summary>
            An image whose position is specified in data-space. It will always
            face the camera, even as the camera moves, and will always appear
            as a fixed size on the screen in pixels.
            </summary>
    </member>
    <member name="M:ObservatoryLib.CameraFacingImage2`2.SetLayer(System.Int32)">
      <summary>
            Set the layer of this item as it appears in the Visualization. Items with 
            lower layers will appear behind items with higher layers. Layers must be
            strictly greater than 0.
            </summary>
      <param name="layer">
      </param>
    </member>
    <member name="M:ObservatoryLib.PlotImage2`2.SetLayer(System.Int32)">
      <summary>
            Set the layer of this item as it appears in the Visualization. Items with 
            lower layers will appear behind items with higher layers. Layers must be
            strictly greater than 0.
            </summary>
      <param name="layer">
      </param>
    </member>
    <member name="T:ObservatoryLib.SeriesAxisLabelsController2D`2">
      <summary>
            Updates the axis labels and sets the tick mark type (e.g. numeric
            or datetime) when added to the sync and whenever the series variables
            are updated.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
    </member>
    <member name="M:ObservatoryLib.Surface`3.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1},System.Collections.Generic.List{`2},System.Collections.Generic.List{System.Double})">
      <summary>
            Construct a surface from a regular grid of 2D points, and the
            function values at those points.
            </summary>
      <param name="x">Sorted unique X Values</param>
      <param name="y">Sorted unique Y Values</param>
      <param name="values">Function values, assumed to be "X-major". 
            Values must be of length equal to length of X times length of Y.</param>
      <param name="colors">Values to use to color the vertices 
            and triangles in the surface.</param>
    </member>
    <member name="M:ObservatoryLib.Surface`3.FromSparseGridWithDefault(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1},System.Collections.Generic.List{`2},System.Collections.Generic.List{System.Double},`2)">
      <summary>
            Construct a surface from triplets of values, which nearly create
            a regular grid. Missing values will be filled in with a default.
            </summary>
      <param name="x">All X coordinates</param>
      <param name="y">All Y coordinates</param>
      <param name="values">All function values</param>
      <param name="colors">All colors</param>
      <param name="ifMissing">Default value if vertices are missing.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.Screen1Quad.Stretchy(ObservatoryLib.Drawing.Color)">
      <summary>
            Creates a Screen1Quad which will simply take up all space allocated. 
            It has zero content size.
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.ScreenImage">
      <summary>
            Screen item that is just a single image - no children. Not intended
            for rendering text (or characters). See ScreenChar.
            </summary>
    </member>
    <member name="T:ObservatoryLib.IColorPresenter">
      <summary>
            Something that ... TODO
            </summary>
    </member>
    <member name="M:ObservatoryLib.ScreenButton.ArrowButton(System.Double,ObservatoryLib.ArrowDirection)">
      <summary>
            Creates a square ScreenButton of specified side length, pointing 
            in the specified direction.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:ObservatoryLib.ScreenCursor._Height">
      <summary>
            The height of the cursor, in pixels.
            </summary>
    </member>
    <member name="F:ObservatoryLib.ScreenCursor._X">
      <summary>
            The horizontal position of the cursor 
            wrt this screen item's location, in pixels.
            </summary>
    </member>
    <member name="F:ObservatoryLib.ScreenCursor._HighLightX">
      <summary>
            The horizontal position of the start of the 
            highlighted region wrt this screen item's location, in pixels.
            If equal to <see cref="F:ObservatoryLib.ScreenCursor._X" />, it will not show.
            </summary>
    </member>
    <member name="F:ObservatoryLib.ScreenCursor._IsActive">
      <summary>
            Whether or not the cursor is actively blinking.
            </summary>
    </member>
    <member name="F:ObservatoryLib.ScreenCursor._IsCursorOn">
      <summary>
            Whether the cursor is currently blinking on.
            </summary>
    </member>
    <member name="F:ObservatoryLib.ScreenCursor._BlinkTimer">
      <summary>
            A timer which causes the cursor to blink 
            on and off when it is visible.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ScreenCursor.SetHorizontalPosition(System.Double,System.Double)">
      <summary>
            Sets the relative horizontal positions
            </summary>
    </member>
    <member name="M:ObservatoryLib.ScreenCursor.SetActive(System.Boolean)">
      <summary>
            Set whether the cursor is actively blinking.
            </summary>
      <param name="active">
      </param>
    </member>
    <member name="P:ObservatoryLib.IScrollBar.ContentLength">
      <summary>
             The total length of the content which we are scrolling over.
            </summary>
    </member>
    <member name="P:ObservatoryLib.IScrollBar.ContentStart">
      <summary>
            Get or set the start position of the active window in content coordinates.
            </summary>
    </member>
    <member name="E:ObservatoryLib.IScrollBar.ContentStartUpdateRequested">
      <summary>
            The scroll bar requests an update to the content start
            in content coordinates.
            </summary>
    </member>
    <member name="F:ObservatoryLib.ScrollBar._Horiz">
      <summary>
            Whether the scroll bar is oriented horizontally.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ScreenBorder.White(System.String)">
      <summary>
            White fill; White border.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ScreenBorder.DefaultDarkBorder(System.String)">
      <summary>
            White fill; black, dark blue, blue border
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ScreenBorder.SelectableWhite(System.String)">
      <summary>
            White fill; White, faint gray, blue border
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.HandlesPyNullAttribute">
      <summary>
            Used on methods and constructors for which consideration has already been made
            for how the method will behave when called from Python and a non-null value is
            auto-populated by the ObsPy wrapper for all nullable types.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ScreenMethods.Tr(ObservatoryLib.Vector2d,System.Boolean)">
      <summary>
            Transposes the vector if it is "horizontal"
            </summary>
    </member>
    <member name="M:ObservatoryLib.ScreenMethods.Pri(ObservatoryLib.Vector2d,System.Boolean)">
      <summary>
             Gets the component along the "primary" axis.
            </summary>
      <param name="v">
      </param>
      <param name="isHorizontal">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ScreenMethods.Sec(ObservatoryLib.Vector2d,System.Boolean)">
      <summary>
            Gets the component along the "secondary" axis.
            </summary>
      <param name="v">
      </param>
      <param name="isHorizontal">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ScreenMethods.SetPri(ObservatoryLib.Vector2d,System.Double,System.Boolean)">
      <summary>
            Set the "primary" component to the specified value.
            </summary>
      <param name="v">
      </param>
      <param name="p">
      </param>
      <param name="isHorizontal">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:ObservatoryLib.PlotSyncBase.DisplayQueue">
      <summary>
            Before the visualization is displayed, enables actions to be queued for 
            completion at display-time. During display, enables actions to be queued for
            completion between frames, and will block until those actions are complete. 
            Work can be queued from any thread. Obviates much of the need for external 
            parties to interact with the frame-synchronization cycle.
            </summary>
    </member>
    <member name="P:ObservatoryLib.PlotSyncBase.Baton">
      <summary>
            A lock unique for the visualization. Used to ensure that the 
            state of the camera and renderable items are not updated 
            by events or tweens during rendering.
            </summary>
    </member>
    <member name="M:ObservatoryLib.ScreenShotSaver.ObtainScreenShot(System.Boolean,System.Action{ObservatoryLib.Drawing.Bitmap})">
      <summary>
            Note that if you are calling this from a "UI" thread (e.g. internal to
            Observatory), you have to use wait=false, otherwise it will hang forever...
            </summary>
    </member>
    <member name="M:ObservatoryLib.SyncDisplayQueue.QueueAndWait(System.Action{ObservatoryLib.IResetWaiter})">
      <summary>
            Queues the action to run after the current frame finishes synchronization, 
            and before the next one. If the underlying plot-sync has not yet rendered
            the first frame, the action is queued to run after the completion of the
            first frame. If the plot-sync *has* rendered at least one frame, a 
            IResetWaiter is supplied to your action, and this method will
            block until that has been Set() by your method.
            </summary>
      <param name="action">
      </param>
    </member>
    <member name="T:ObservatoryLib.TweenManager">
      <summary>
            A sealed class that manages the execution of Tweens in a single
            constructed sequence. New Tween Sequences can be enqueued for execution
            once exisitng tweens have completed.
            </summary>
    </member>
    <member name="F:ObservatoryLib.TweenManager._Tweens">
      <summary>
            The sequence of tweens that have not yet been dequeued and begun.
            </summary>
    </member>
    <member name="F:ObservatoryLib.TweenManager._Active">
      <summary>
            The list of tweens that are currently being executed. No guarantee
            that they have called begun or that they have not called Complete.
            </summary>
    </member>
    <member name="F:ObservatoryLib.TweenManager._Timer">
      <summary>
            The timer, which is reused as appropriate, and used to synchronize
            parallel active tweens.
            </summary>
    </member>
    <member name="F:ObservatoryLib.TweenManager.Lock">
      <summary>
            The item which is locked upon internally during updates. All 
            parallel tweens will update as a transaction wrt this lock.
            </summary>
    </member>
    <member name="M:ObservatoryLib.TweenManager.Enqueue(ObservatoryLib.TweenSequence)">
      <summary>
            Enqueues a TweenSequence for execution as soon as prior items
            have completed, which might be immediately.
            </summary>
      <param name="sequence">
      </param>
    </member>
    <member name="M:ObservatoryLib.TweenManager.CompleteAll">
      <summary>
            Forces all tweens to finish execution as fast as
            possible. Their transfer functions will be skipped and their final
            state vectors will be produced in order and as quickly as possible.
            NOTE: This method does not block waiting for the event handlers to
            complete and return.
            </summary>
    </member>
    <member name="M:ObservatoryLib.TweenManager.TryUpdateTweens">
      <summary>
            Wraps the UpdateTweens method in a try-catch and a lock 
            </summary>
    </member>
    <member name="M:ObservatoryLib.TweenManager.UpdateTweens">
      <summary>
            Updates the active tweens, and if complete, gets the next set from 
            the queue. Kicks off another work item to update if necessary.
            </summary>
    </member>
    <member name="P:ObservatoryLib.TweenManager.IsActive">
      <summary>
            Whether there are any tweens either currently being executed or
            queued to be executed.
            </summary>
    </member>
    <member name="P:ObservatoryLib.InteractionManager.PickNames">
      <summary>
            A list of all IDs that this syncable item (but not its children,
            if there are any) would respond to if clicked on. If there are 
            extra items in this set, it will only be a problem if the same item
            is present in another syncable. If an item is created by this
            syncable, and the item is NOT present in this list, nothing will
            happen when the item is clicked on (or otherwise identified).
            </summary>
    </member>
    <member name="M:ObservatoryLib.CameraState.MakeStencil(ObservatoryLib.RectangularArea,System.Boolean)">
      <summary>
            TODO: NOT QUITE RIGHT RE: FLIPPED Y VALUES....
            Makes a Stencil that corresponds to the supplied area. The area is
            specifide in pixels relative to the Visulation's upper-left, i.e. 
            relative to the plot sync's viewport. The output stencil is absolute
            with respect to the whole hosting window (as is required during rendering).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:ObservatoryLib.CameraState.Theta">
      <summary>
            The "azimuth" angle of rotation of the camera about its subject 
            measured in radians from the positive Z axis, in the direction of 
            the positive X axis. Value will be on the interval [0,2*pi).
            </summary>
    </member>
    <member name="P:ObservatoryLib.CameraState.Phi">
      <summary>
            The "elevation" angle of rotation of the camera about its subject
            measured from the XZ in the direction of the positive Y axis.
            Value will be on the interval [-pi/2,pi/2].
            </summary>
    </member>
    <member name="F:ObservatoryLib.ConversionManagerBase._Lock">
      <summary>
            A visualization-level lock set at construction time
            </summary>
    </member>
    <member name="M:ObservatoryLib.ConversionManager3.PeekAtLocationGl(ObservatoryLib.Vector3d,ObservatoryLib.Vector3d,ObservatoryLib.Vector3d)">
      <summary>
            Suppose the zoom factor and center shift are set to the 
            specified values, where would the point, specified in data 
            coordinates, end up in OpenGL coordinates?
            </summary>
      <param name="zoomFactor">
      </param>
      <param name="centerShift">
      </param>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.ConversionManager3.GetCenterShiftForTarget(ObservatoryLib.Vector3d)">
      <summary>
            Suppose the zoom factor is set to the specified value. What center
            shift would be required so that the point, specified in data 
            coordinates, would be centered in the conversion volume?
            </summary>
    </member>
    <member name="T:ObservatoryLib.TwoStepLinearConverter">
      <summary>
            Maintains 3 1-dimensional, linear coordinate systems, and the linear
            conversions among them. The purpose of this two-step conversion is
            to enable double-precision conversion from A to B, and (more frequently
            changed) single-precision conversion from B to C.
            </summary>
    </member>
    <member name="M:ObservatoryLib.TwoStepLinearConverter.MapToRange(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Update the range so that [minData, maxData] maps to [minC, maxC].
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:ObservatoryLib.IViewer">
      <summary>
            Viewing controls and behaviors that are common to both 2D and 3D
            </summary>
    </member>
    <member name="T:ObservatoryLib.IViewer3D">
      <summary>
            Viewing controls and behaviors specific to 3D viewing
            </summary>
    </member>
    <member name="T:ObservatoryLib.IViewer2D">
      <summary>
            Viewing controls and behaviors specific to 2D viewing
            </summary>
    </member>
    <member name="T:ObservatoryLib.VantageController3D">
      <summary>
            A class that encapsulates the logic to convert among all primary 
            coordinate systems: data (3D), GL, and Screen. 
            </summary>
    </member>
    <member name="F:ObservatoryLib.VantageController3D._Conversion">
      <summary> 
            Manages the conversion between data and OpenGL coordinates.
            </summary>
    </member>
    <member name="F:ObservatoryLib.VantageController3D._Tween">
      <summary>
            Manages the tweens for viewing the subject matter 
            (zooming, panning, etc).
            </summary>
    </member>
    <member name="F:ObservatoryLib.VantageController3D.ForceSubjectCube">
      <summary>
            Whether the subject volume should be forced to be a cube in OpenGL
            coordinates.
            </summary>
    </member>
    <member name="M:ObservatoryLib.VantageController3D.Resize(ObservatoryLib.Drawing.Size,ObservatoryLib.RectangularArea)">
      <summary>
            Call this method to let the Viewing manager know it's time to
            set OpenGL parameters.
            </summary>
    </member>
    <member name="M:ObservatoryLib.VantageController3D.VisibleVolumeGl">
      <summary>
            The axis-aligned, rectangular solid volume in GL Space that can 
            comfortably be seen from any angle and with some buffer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.VantageController3D.GetPixel(ObservatoryLib.Vector3d)">
      <summary>
            Converts a point specified in data coordinates to its 
            corresponding pixel location. Note that this is not the primary
            method for doing the conversion of all points. That is usually done
            internally to OpenGL. This method is used for "picking" and 
            converting a small number of points, e.g. screen-based text.
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.VantageController3D.ToGlCoords(ObservatoryLib.Vector3d)">
      <summary>
            Converts a point specified in data coordinates to
            OpenGL coordinates.
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.VantageController3D.ToDataCoords(ObservatoryLib.Vector3d)">
      <summary>
            Converts a point specified in OpenGL coordinates to
            data coordinates.
            </summary>
      <param name="gl">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.VantageController3D.Zoom(System.Double,ObservatoryLib.IResetWaiter,System.Boolean)">
      <summary>
            Inward &lt; 1; Outward &gt; 1.
            </summary>
    </member>
    <member name="M:ObservatoryLib.VantageController3D.PreserveRelativeScale(ObservatoryLib.RectangularSolid)">
      <summary>
            Adjusts a proposed new volume in data coordinates so that it will
            preserve the current enforced axis scale equality. If different
            coordinates have different zoom changes, it will ensure that 
            the final zoom on the enforced axes will be that of the one which 
            is scaling down the most in size (or scaling up the least).
            </summary>
      <param name="finish">The volume in data coordinates 
            that is being proposed as the new subject volume.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.VantageController3D.PreserveRelativeScale(ObservatoryLib.RectangularSolid,ObservatoryLib.D3)">
      <summary>
            Adjusts a proposed new volume in data coordinates so that it will
            preserve the current enforced axis scale equality. If different
            coordinates have different zoom changes, it will ensure that they
            all have the same zoom as the one in the specified coordinate, 
            assuming that the specified coordinate is included in the set of
            axes being held to scale equality.
            </summary>
      <param name="finish">The volume in data coordinates 
            that is being proposed as the new subject volume.</param>
      <param name="master">The coordinate whose zoom is to be enforced
            across other axes where enforced by scale equality.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.VantageController3D.PreserveRelativeScale(ObservatoryLib.RectangularSolid,System.Double)">
      <summary>
            Adjusts a proposed volume specified in data coordinates so that
            it will preserve the current enforced axis scale equality. If
            different coordinates have different zoom changes, it will ensure
            that they all have the specified *change* in zoom.
            </summary>
      <param name="finish">The volume in data coordinates 
            that is being proposed as the new subject volume.</param>
      <param name="desiredScaleChange">The desired scale *change*
            to produce on scale-equal axes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:ObservatoryLib.VantageController3D.SetProjectionType(System.Boolean,ObservatoryLib.IResetWaiter,System.Boolean)">
      <summary>
            Tweens the camera to view from orthographic or 
            perspective projection. All subsequent zooms are handled according
            to the new camera model of zooming. The "initial" state must
            also be reset to something equivalent.
            </summary>
            TODO: Queue and Wait!
        </member>
    <member name="P:ObservatoryLib.VantageController3D.Camera">
      <summary>
            Manages the state of the one and only camera.
            </summary>
    </member>
    <member name="P:ObservatoryLib.VantageController3D.ScaleEqualAxes">
      <summary>
            Which axes are being held scale equal.
            </summary>
    </member>
    <member name="P:ObservatoryLib.VantageController3D.Lock">
      <summary>
            A lock for the visualization, which is set during construction
            </summary>
    </member>
    <member name="M:ObservatoryLib.GifEncoder.GetImagePixels(ObservatoryLib.Drawing.Bitmap)">
            Extracts image pixels into byte array "pixels"
        </member>
    <member name="M:ObservatoryLib.GifEncoder.WriteImageDesc(System.IO.Stream,System.Int32,System.Int32,System.Boolean)">
            Writes Image Descriptor
        </member>
    <member name="M:ObservatoryLib.GifEncoder.WriteLSD(System.IO.Stream,System.Int32,System.Int32)">
            Writes Logical Screen Descriptor
        </member>
    <member name="M:ObservatoryLib.GifEncoder.WriteNetscapeExt(System.IO.Stream,System.Int32)">
            Writes Netscape application extension to define
            repeat count.
        </member>
    <member name="M:ObservatoryLib.GifEncoder.WritePalette(System.IO.Stream,System.Byte[])">
            Writes color table
        </member>
    <member name="M:ObservatoryLib.GifEncoder.WritePixels(System.IO.Stream,System.Int32,System.Int32,System.Byte[])">
            Encodes and writes pixel data
        </member>
    <member name="M:ObservatoryLib.GifEncoder.WriteShort(System.IO.Stream,System.Int32)">
            Write 16-bit value to output stream, LSB first
        </member>
    <member name="M:ObservatoryLib.GifEncoder.WriteString(System.IO.Stream,System.String)">
            Writes string to output stream
        </member>
    <member name="T:Observatory.Setup.DiffieHellmann">
      <summary>
            Represents the Diffie-Hellman algorithm.
            </summary>
    </member>
    <member name="F:Observatory.Setup.DiffieHellmann.bits">
      <summary>
            The number of bits to generate.
            </summary>
    </member>
    <member name="F:Observatory.Setup.DiffieHellmann.prime">
      <summary>
            The shared prime.
            </summary>
    </member>
    <member name="F:Observatory.Setup.DiffieHellmann.g">
      <summary>
            The shared base.
            </summary>
    </member>
    <member name="F:Observatory.Setup.DiffieHellmann.mine">
      <summary>
            The private prime.
            </summary>
    </member>
    <member name="F:Observatory.Setup.DiffieHellmann.key">
      <summary>
            The final key.
            </summary>
    </member>
    <member name="F:Observatory.Setup.DiffieHellmann.representation">
      <summary>
            The string representation/packet.
            </summary>
    </member>
    <member name="M:Observatory.Setup.DiffieHellmann.GenerateRequest">
      <summary>
            Generates a request packet.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Observatory.Setup.DiffieHellmann.GenerateResponse(System.String)">
      <summary>
            Generate a response packet.
            </summary>
      <param name="request">The string representation of the request.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Observatory.Setup.DiffieHellmann.HandleResponse(System.String)">
      <summary>
            Generates the key after a response is received.
            </summary>
      <param name="response">The string representation of the response.</param>
    </member>
    <member name="M:Observatory.Setup.DiffieHellmann.Dispose">
      <summary>
            Ends the calculation. The key will still be available.
            </summary>
    </member>
    <member name="P:Observatory.Setup.DiffieHellmann.Key">
      <summary>
            Gets the final key to use for encryption.
            </summary>
    </member>
    <member name="M:ObservatoryLib.WindowsThreadRunner.WaitOnFirstThenShow(System.Action)">
      <summary>
            NOTE: The action input here MUST call InitOnCurrentThread, before
            it tries to display the figure. It must also call ApplicationRun()
            before it completes, but after is displays the figure.
            </summary>
      <param name="runWpf">
      </param>
    </member>
  </members>
</doc>